<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Yucihent&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yucihent.top/"/>
  <updated>2018-08-28T13:17:12.380Z</updated>
  <id>http://yucihent.top/</id>
  
  <author>
    <name>Yucihent</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>atom使用小技巧</title>
    <link href="http://yucihent.top/atom-tips.html"/>
    <id>http://yucihent.top/atom-tips.html</id>
    <published>2018-08-26T16:00:00.000Z</published>
    <updated>2018-08-28T13:17:12.380Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>vscode内存泄漏的问题，不得已放弃，转而使用atom，用了之后才发现atom真的太好用了<br>下载地址：<a href="https://atom.io/" target="_blank" rel="noopener">atom</a></p></blockquote><blockquote><p>在这说一下atom的一些小玩意</p></blockquote><a id="more"></a><h2 id="tips"><a href="#tips" class="headerlink" title="tips"></a>tips</h2><ol><li><p>安装插件<br>点击 <code>File</code> – <code>Settings</code> – <code>Install</code> 搜索想要安装的插件进行安装即可</p></li><li><p>自定义代码段<br>相比于vscode，我更喜欢atom自定义代码段风格，更加方便</p><blockquote><p><a href="https://github.com/hezizi/Blog/issues/7" target="_blank" rel="noopener">vscode自定义代码段</a></p></blockquote></li></ol><p>atom自定义代码段，以vue为例<br>我们在安装vue插件时，点击插件settings，我们会看到Scope</p><p><img src="https://user-images.githubusercontent.com/28501094/44663645-b5893900-aa43-11e8-8c31-9afa7957a688.PNG" alt="b"></p><p>点击 <code>File</code> – <code>Snippets</code> 将<code>text.html.vue</code>复制进来</p><blockquote><p>text.html.vue前面需要加上一个小点</p></blockquote><p><code>prefix</code> 代表我们自定义代码段的关键词<br><code>body</code> 代表我们自定义的代码段，当有多行时需要前后各三个单引号进行包裹 <code>&#39;&#39;&#39;</code></p><p><img src="https://user-images.githubusercontent.com/28501094/44723226-f9427800-ab01-11e8-94a2-0525b185edc5.PNG" alt="c"></p><ol start="3"><li>自定义编辑器风格<br>点击 <code>File</code> – <code>Stylesheet</code><br>atom很有趣的一点是整个编辑器是一个HTML，我们可以通过css来改变其样式<br>windows系统通过 <code>ctrl</code> + <code>shift</code> + <code>I</code> 打开控制台</li></ol><p><img src="https://user-images.githubusercontent.com/28501094/44723234-ffd0ef80-ab01-11e8-85c3-9c582767633d.PNG" alt="d"></p><p>这样我们就可以通过控制台找到找到类名来自定义样式了</p><blockquote><p>atom这三个小技巧还是挺不错的，以后发现更多继续补充</p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;vscode内存泄漏的问题，不得已放弃，转而使用atom，用了之后才发现atom真的太好用了&lt;br&gt;下载地址：&lt;a href=&quot;https://atom.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;atom&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;在这说一下atom的一些小玩意&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="atom" scheme="http://yucihent.top/categories/atom/"/>
    
    
      <category term="atom" scheme="http://yucihent.top/tags/atom/"/>
    
  </entry>
  
  <entry>
    <title>开发小总结</title>
    <link href="http://yucihent.top/little-tips.html"/>
    <id>http://yucihent.top/little-tips.html</id>
    <published>2018-08-24T16:00:00.000Z</published>
    <updated>2018-08-25T14:50:54.923Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>通过js动态添加的dom元素无法直接绑定事件，需要通过</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#父级节点'</span>).on(<span class="string">'click'</span>, <span class="string">'绑定事件元素'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><a id="more"></a><blockquote><p>$(this)无法在ajax中直接使用，解决：将$(this)赋值给一变量</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="string">'#button'</span>).on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line"><span class="keyword">var</span> _this = $(<span class="keyword">this</span>);</span><br><span class="line">$.ajax(&#123;</span><br><span class="line">type: <span class="string">'get'</span>,</span><br><span class="line">url: <span class="string">'........'</span>,</span><br><span class="line">data: &#123;</span><br><span class="line">userId: _this.attr(<span class="string">'id'</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>通过使用.one()方法使事件只触发一次</p></blockquote><blockquote><p>使用eslint时对于使用了new关键字的代码需要加上    <code>/* eslint-disable no-new */</code></p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">/* eslint-disable no-new */</span></span><br><span class="line"><span class="keyword">new</span> Vue(&#123;</span><br><span class="line">  el: <span class="string">'#app'</span>,</span><br><span class="line">  router,</span><br><span class="line">  store,</span><br><span class="line">  components: &#123; App &#125;,</span><br><span class="line">  template: <span class="string">'&lt;App/&gt;'</span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><blockquote><p>swiper3和swiper4用法上稍有不同</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">swiperOption: &#123;</span><br><span class="line">    <span class="comment">// Swiper3使用</span></span><br><span class="line">    <span class="comment">// pagination: '.swiper-pagination'</span></span><br><span class="line"></span><br><span class="line">    <span class="comment">// Swiper4</span></span><br><span class="line">    pagination: &#123;</span><br><span class="line">        el: <span class="string">'.swiper-pagination'</span></span><br><span class="line">    &#125;,</span><br><span class="line">    loop: <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;通过js动态添加的dom元素无法直接绑定事件，需要通过&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;$(&lt;span class=&quot;string&quot;&gt;&#39;#父级节点&#39;&lt;/span&gt;).on(&lt;span class=&quot;string&quot;&gt;&#39;click&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;绑定事件元素&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&amp;#125;)&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yucihent.top/categories/JavaScript/"/>
    
      <category term="经验总结" scheme="http://yucihent.top/categories/JavaScript/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="JavaScript" scheme="http://yucihent.top/tags/JavaScript/"/>
    
      <category term="经验总结" scheme="http://yucihent.top/tags/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>JS导出Excel文件</title>
    <link href="http://yucihent.top/js-export-excel.html"/>
    <id>http://yucihent.top/js-export-excel.html</id>
    <published>2018-08-08T13:50:00.000Z</published>
    <updated>2018-08-08T13:57:56.844Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>需求： datatable表格，每一行带有checkbox，勾选checkbox导出当前行所有数据，全选则导出所有选中行的数据</p></blockquote><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">a</span> <span class="attr">class</span>=<span class="string">"download"</span> <span class="attr">download</span>=<span class="string">"用户列表"</span>&gt;</span>导出<span class="tag">&lt;/<span class="name">a</span>&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">exportFile</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> dataArr = [];<span class="comment">//定义数组用来保存所勾选的列表当前行数据</span></span><br><span class="line">    <span class="comment">// 定义表头</span></span><br><span class="line">    <span class="keyword">var</span> str = <span class="string">'&lt;tr&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;样本名称&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;问卷编码&lt;/th&gt;</span></span><br><span class="line"><span class="string">        &lt;th&gt;提交时间&lt;/th&gt;</span></span><br><span class="line"><span class="string">    &lt;/tr&gt;'</span></span><br><span class="line">    <span class="comment">// 遍历列表中所购选中的行</span></span><br><span class="line">    $(<span class="string">'table'</span>).find(<span class="string">'tr.hover-bg'</span>).each(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">var</span> Data = <span class="keyword">new</span> <span class="built_in">Object</span>();</span><br><span class="line">        Data.AreaName = $(<span class="keyword">this</span>).find(<span class="string">'td:eq(1)'</span>).html();</span><br><span class="line">        Data.DataID= $(<span class="keyword">this</span>).find(<span class="string">'td:eq(2)'</span>).html();</span><br><span class="line">        Data.EntryTime= $(<span class="keyword">this</span>).find(<span class="string">'td:eq(3)'</span>).html();</span><br><span class="line">        dataArr.push(Data);</span><br><span class="line">    &#125;)</span><br><span class="line">    <span class="keyword">if</span>($(<span class="string">'table'</span>).find(<span class="string">'tr'</span>).hasClass(<span class="string">'hover-bg'</span>)) &#123;</span><br><span class="line">        <span class="comment">//循环遍历，每行加入tr标签，每个单元格加td标签</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; dataArr.length; i++) &#123;</span><br><span class="line">            str += <span class="string">'&lt;tr&gt;'</span>;</span><br><span class="line">            <span class="keyword">for</span> (<span class="keyword">let</span> item <span class="keyword">in</span> dataArr[i]) &#123;</span><br><span class="line">                <span class="comment">//增加\t为了不让表格显示科学计数法或者其他格式</span></span><br><span class="line">                str += <span class="string">`&lt;td&gt;<span class="subst">$&#123; dataArr[i][item] + <span class="string">'\t'</span>&#125;</span>&lt;/td&gt;`</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            str += <span class="string">'&lt;/tr&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">var</span> template = <span class="string">`&lt;html xmlns:o="urn:schemas-microsoft-com:office:office"</span></span><br><span class="line"><span class="string">                          xmlns:x="urn:schemas-microsoft-com:office:excel"</span></span><br><span class="line"><span class="string">                          xmlns="http://www.w3.org/TR/REC-html40"&gt;</span></span><br><span class="line"><span class="string">                          &lt;head&gt;&lt;!--[if gte mso 9]&gt;&lt;xml&gt;&lt;x:ExcelWorkbook&gt;&lt;x:ExcelWorksheets&gt;&lt;x:ExcelWorksheet&gt;</span></span><br><span class="line"><span class="string">                            &lt;x:Name&gt;'录入列表.xls'&lt;/x:Name&gt;</span></span><br><span class="line"><span class="string">                            &lt;x:WorksheetOptions&gt;&lt;x:DisplayGridlines/&gt;&lt;/x:WorksheetOptions&gt;&lt;/x:ExcelWorksheet&gt;</span></span><br><span class="line"><span class="string">                            &lt;/x:ExcelWorksheets&gt;&lt;/x:ExcelWorkbook&gt;&lt;/xml&gt;&lt;![endif]--&gt;</span></span><br><span class="line"><span class="string">                            &lt;/head&gt;&lt;body&gt;&lt;table&gt;<span class="subst">$&#123;str&#125;</span>&lt;/table&gt;&lt;/body&gt;&lt;/html&gt;`</span>;</span><br><span class="line">                            </span><br><span class="line">        <span class="comment">// 实例化一个Blob对象，其构造函数的第一个参数是包含文件内容的数组，第二个参数是包含文件类型属性的对象</span></span><br><span class="line">        <span class="keyword">var</span> blob = <span class="keyword">new</span> Blob([template], &#123;<span class="attr">type</span>: <span class="string">"application/vnd.ms-excel"</span>&#125;);</span><br><span class="line">        $(<span class="string">'.download'</span>).attr(<span class="string">'href'</span>, URL.createObjectURL(blob));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;blockquote&gt;
&lt;p&gt;需求： datatable表格，每一行带有checkbox，勾选checkbox导出当前行所有数据，全选则导出所有选中行的数据&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;
      
    
    </summary>
    
      <category term="JavaScript" scheme="http://yucihent.top/categories/JavaScript/"/>
    
    
      <category term="JavaScript" scheme="http://yucihent.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>dataTables--ajax 分页基本使用</title>
    <link href="http://yucihent.top/dataTables-ajax.html"/>
    <id>http://yucihent.top/dataTables-ajax.html</id>
    <published>2018-06-02T16:00:00.000Z</published>
    <updated>2018-06-03T04:53:08.546Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>dataTables是一款很强大很好用的前端table 分页插件，地址：<a href="https://www.datatables.net/" target="_blank" rel="noopener">dataTables</a></p></blockquote><blockquote><p>如何使用大家可以去官网看看教程，此处总结下dataTables结合ajax需要注意的点</p></blockquote><a id="more"></a><h3 id="一，开始使用"><a href="#一，开始使用" class="headerlink" title="一，开始使用"></a>一，开始使用</h3><h4 id="JavaScript代码"><a href="#JavaScript代码" class="headerlink" title="JavaScript代码"></a>JavaScript代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'#example'</span>).DataTable( &#123;</span><br><span class="line">        <span class="string">"ajax"</span>: <span class="string">"数据url"</span>,</span><br><span class="line">        <span class="string">"columns"</span>: [</span><br><span class="line">            &#123; <span class="string">"data"</span>: <span class="string">"name"</span> &#125;,</span><br><span class="line">            &#123; <span class="string">"data"</span>: <span class="string">"position"</span> &#125;,</span><br><span class="line">            &#123; <span class="string">"data"</span>: <span class="string">"office"</span> &#125;,</span><br><span class="line">            &#123; <span class="string">"data"</span>: <span class="string">"extn"</span> &#125;,</span><br><span class="line">            &#123; <span class="string">"data"</span>: <span class="string">"start_date"</span> &#125;,</span><br><span class="line">            &#123; <span class="string">"data"</span>: <span class="string">"salary"</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125; );</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><h4 id="json数据"><a href="#json数据" class="headerlink" title="json数据"></a>json数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  <span class="string">"data"</span>: [</span><br><span class="line">       &#123;</span><br><span class="line">      <span class="string">"id"</span>: <span class="string">"1"</span>,</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"Tiger Nixon"</span>,</span><br><span class="line">      <span class="string">"position"</span>: <span class="string">"System Architect"</span>,</span><br><span class="line">      <span class="string">"salary"</span>: <span class="string">"$320,800"</span>,</span><br><span class="line">      <span class="string">"start_date"</span>: <span class="string">"2011/04/25"</span>,</span><br><span class="line">      <span class="string">"office"</span>: <span class="string">"Edinburgh"</span>,</span><br><span class="line">      <span class="string">"extn"</span>: <span class="string">"5421"</span></span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">      <span class="string">"id"</span>: <span class="string">"2"</span>,</span><br><span class="line">      <span class="string">"name"</span>: <span class="string">"Garrett Winters"</span>,</span><br><span class="line">      <span class="string">"position"</span>: <span class="string">"Accountant"</span>,</span><br><span class="line">      <span class="string">"salary"</span>: <span class="string">"$170,750"</span>,</span><br><span class="line">      <span class="string">"start_date"</span>: <span class="string">"2011/07/25"</span>,</span><br><span class="line">      <span class="string">"office"</span>: <span class="string">"Tokyo"</span>,</span><br><span class="line">      <span class="string">"extn"</span>: <span class="string">"8422"</span></span><br><span class="line">    &#125;,</span><br><span class="line">  ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>数据格式必须一致，data作为key，值为数组对象，<strong>获取对象属性值能够直接使用data.属性名来调用获取。</strong></p><p><strong>如果不能使用data.属性名来直接调用获取值则需要使用dataSrc来动态指向数据源。</strong></p><h4 id="JavaScript代码-1"><a href="#JavaScript代码-1" class="headerlink" title="JavaScript代码"></a>JavaScript代码</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'#example'</span>).DataTable( &#123;</span><br><span class="line">        <span class="string">"ajax"</span>: <span class="string">"数据url"</span>,</span><br><span class="line">        <span class="string">"dataSrc"</span>: <span class="string">"data.records"</span>,</span><br><span class="line">        <span class="string">"columns"</span>: [</span><br><span class="line">            &#123; <span class="string">"data"</span>: <span class="string">"name"</span> &#125;,</span><br><span class="line">            &#123; <span class="string">"data"</span>: <span class="string">"position"</span> &#125;,</span><br><span class="line">            &#123; <span class="string">"data"</span>: <span class="string">"office"</span> &#125;,</span><br><span class="line">            &#123; <span class="string">"data"</span>: <span class="string">"extn"</span> &#125;,</span><br><span class="line">            &#123; <span class="string">"data"</span>: <span class="string">"start_date"</span> &#125;,</span><br><span class="line">            &#123; <span class="string">"data"</span>: <span class="string">"salary"</span> &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125; );</span><br><span class="line">&#125; );</span><br></pre></td></tr></table></figure><h4 id="json数据-1"><a href="#json数据-1" class="headerlink" title="json数据"></a>json数据</h4><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"data"</span>: &#123;</span><br><span class="line">    <span class="string">"records"</span>: [</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"id"</span>: <span class="string">"1"</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"Tiger Nixon"</span>,</span><br><span class="line">            <span class="string">"position"</span>: <span class="string">"System Architect"</span>,</span><br><span class="line">            <span class="string">"salary"</span>: <span class="string">"$320,800"</span>,</span><br><span class="line">            <span class="string">"start_date"</span>: <span class="string">"2011/04/25"</span>,</span><br><span class="line">            <span class="string">"office"</span>: <span class="string">"Edinburgh"</span>,</span><br><span class="line">            <span class="string">"extn"</span>: <span class="string">"5421"</span></span><br><span class="line">        &#125;,</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="string">"id"</span>: <span class="string">"2"</span>,</span><br><span class="line">            <span class="string">"name"</span>: <span class="string">"Garrett Winters"</span>,</span><br><span class="line">            <span class="string">"position"</span>: <span class="string">"Accountant"</span>,</span><br><span class="line">            <span class="string">"salary"</span>: <span class="string">"$170,750"</span>,</span><br><span class="line">            <span class="string">"start_date"</span>: <span class="string">"2011/07/25"</span>,</span><br><span class="line">            <span class="string">"office"</span>: <span class="string">"Tokyo"</span>,</span><br><span class="line">            <span class="string">"extn"</span>: <span class="string">"8422"</span></span><br><span class="line">        &#125;,</span><br><span class="line">    ]</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="二，服务器处理-Server-side-processing"><a href="#二，服务器处理-Server-side-processing" class="headerlink" title="二，服务器处理(Server-side processing)"></a>二，服务器处理(Server-side processing)</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"processing"</span>: <span class="literal">true</span>,</span><br><span class="line"><span class="string">"serverSide"</span>: <span class="literal">true</span>,</span><br><span class="line">ajax(data, callback, settings) &#123;</span><br><span class="line">    <span class="built_in">console</span>.log(data);</span><br><span class="line">    <span class="comment">//封装请求参数</span></span><br><span class="line">    <span class="keyword">var</span> param = &#123;&#125;;</span><br><span class="line">    param.pageSize = data.length;       <span class="comment">//页面显示记录条数，在页面显示每页显示多少项的时候</span></span><br><span class="line">    param.pageIndex = data.start + <span class="number">1</span>;   <span class="comment">//开始的记录序号</span></span><br><span class="line">    <span class="built_in">console</span>.log(param);</span><br><span class="line">    $.ajax(&#123;</span><br><span class="line">        type: <span class="string">'get'</span>,</span><br><span class="line">        url: <span class="string">'http://192.168:8766/User/list'</span>,</span><br><span class="line">        cache: <span class="literal">false</span>,  <span class="comment">//禁用缓存</span></span><br><span class="line">        data: param,</span><br><span class="line">        dataType: <span class="string">'json'</span>,</span><br><span class="line">        success: <span class="function"><span class="keyword">function</span>(<span class="params">res</span>) </span>&#123;</span><br><span class="line">            setTimeout( <span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;</span><br><span class="line">                <span class="keyword">var</span> out = &#123;&#125;;</span><br><span class="line">                out.draw = data.draw;</span><br><span class="line">                out.recordsTotal = res.data.count;</span><br><span class="line">                out.recordsFiltered = res.data.count;</span><br><span class="line">                out.data =  res.data.records;</span><br><span class="line">                callback( out );</span><br><span class="line">            &#125;, <span class="number">50</span> );</span><br><span class="line">        &#125;,</span><br><span class="line">        error() &#123;</span><br><span class="line">            alert(<span class="string">'error'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;)</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"bLengthChange"</span>: <span class="literal">false</span>,     <span class="comment">//关闭选择显示条数</span></span><br><span class="line"><span class="string">"bSort"</span>: <span class="literal">false</span>,             <span class="comment">//不能排序</span></span><br><span class="line"><span class="string">"iDisplayLength"</span>: <span class="number">10</span>,</span><br><span class="line"><span class="string">"pagingType"</span>: <span class="string">"full_numbers"</span>,</span><br><span class="line"><span class="string">"language"</span>: &#123;</span><br><span class="line">    <span class="string">"bProcessing"</span>: <span class="string">"正在加载中......"</span>,</span><br><span class="line">    <span class="string">"sZeroRecords"</span>: <span class="string">"没有检索到数据"</span>, </span><br><span class="line">    <span class="string">"info"</span>: <span class="string">"显示 _START_ 至 _END_ 条记录，共 _TOTAL_ 条记录"</span>,</span><br><span class="line">    <span class="string">"sInfoFiltered"</span>: <span class="string">"数据表中共为 _MAX_ 条记录"</span>,</span><br><span class="line">    <span class="string">"oPaginate"</span> : &#123;  </span><br><span class="line">        <span class="string">"sFirst"</span> : <span class="string">"首页"</span>,  </span><br><span class="line">        <span class="string">"sPrevious"</span> : <span class="string">"上一页"</span>,  </span><br><span class="line">        <span class="string">"sNext"</span> : <span class="string">"下一页"</span>,  </span><br><span class="line">        <span class="string">"sLast"</span> : <span class="string">"末页"</span>  </span><br><span class="line">    &#125;,</span><br><span class="line">&#125;,</span><br><span class="line"><span class="string">"columns"</span>: [</span><br><span class="line">    &#123;</span><br><span class="line">        data: <span class="string">'UserId'</span>,</span><br><span class="line">        render(data, type, full, meta) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">                &lt;input type="checkbox" class="checkchild" value="<span class="subst">$&#123;data&#125;</span>" /&gt;</span></span><br><span class="line"><span class="string">                &lt;img class="check-img" src="../assets/img/backstage_icon_cheakbox_default.png" alt=""&gt;</span></span><br><span class="line"><span class="string">            `</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;<span class="attr">data</span> : <span class="string">"Account"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">data</span> : <span class="string">"RealName"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">data</span> : <span class="string">"Email"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">data</span> : <span class="string">"DepartmentId"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">data</span> : <span class="string">"UserId"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">data</span> : <span class="string">"WorkGroupId"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">data</span> : <span class="string">"IsManager"</span>&#125;,</span><br><span class="line">    &#123;<span class="attr">data</span> : <span class="string">"Mobile"</span>&#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        data : <span class="string">"CreateDate"</span>,</span><br><span class="line">    &#125;,</span><br><span class="line">    &#123;</span><br><span class="line">        render(data, type, full, meta) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="string">`</span></span><br><span class="line"><span class="string">            &lt;div class="am-btn-toolbar"&gt;</span></span><br><span class="line"><span class="string">                &lt;div class="am-btn-group am-btn-group-xs"&gt;</span></span><br><span class="line"><span class="string">                    &lt;button class="am-btn am-btn-bg-white am-btn-xs am-text-secondary edit"&gt;&lt;span class="am-icon-pencil-square-o"&gt;&lt;/span&gt;编辑&lt;/button&gt;</span></span><br><span class="line"><span class="string">                    &lt;button class="am-btn am-btn-bg-white am-btn-xs am-text-danger am-hide-sm-only del"&gt;&lt;span class="am-icon-copy"&gt;&lt;/span&gt; 删除&lt;/button&gt;</span></span><br><span class="line"><span class="string">                    &lt;button class="am-btn am-btn-bg-white am-btn-xs am-text-warning am-hide-sm-only authorize"&gt;&lt;span class="am-icon-trash-o"&gt;&lt;/span&gt; 授权&lt;/button&gt;</span></span><br><span class="line"><span class="string">                &lt;/div&gt;</span></span><br><span class="line"><span class="string">            &lt;/div&gt;`</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">param.pageSize = data.length;       <span class="comment">//页面显示记录条数，在页面显示每页显示多少项的时候</span></span><br><span class="line">param.pageIndex = data.start + <span class="number">1</span>;   <span class="comment">//开始的记录序号</span></span><br></pre></td></tr></table></figure><ul><li>pageSize：为后台数据，每页有多少条数据</li><li>pageIndex：页面索引</li></ul><blockquote><p>因为data.start默认值为0，所以加一表示第一页开始</p></blockquote><p>记录自己踩过的坑</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;dataTables是一款很强大很好用的前端table 分页插件，地址：&lt;a href=&quot;https://www.datatables.net/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;dataTables&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;如何使用大家可以去官网看看教程，此处总结下dataTables结合ajax需要注意的点&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yucihent.top/categories/JavaScript/"/>
    
      <category term="经验总结" scheme="http://yucihent.top/categories/JavaScript/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="JavaScript" scheme="http://yucihent.top/tags/JavaScript/"/>
    
      <category term="经验总结" scheme="http://yucihent.top/tags/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>jQuery插件开发--Tab</title>
    <link href="http://yucihent.top/jquery-plugin-tab.html"/>
    <id>http://yucihent.top/jquery-plugin-tab.html</id>
    <published>2018-04-25T16:00:00.000Z</published>
    <updated>2018-04-26T10:18:48.115Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>打造自己的插件库</p></blockquote><a id="more"></a><p><strong>人工参数配置</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">    $(<span class="string">'.jq-tab'</span>).tabPlugin(&#123;</span><br><span class="line">        <span class="comment">//人工参数</span></span><br><span class="line">        type: <span class="string">'click'</span>,</span><br><span class="line">        effect: <span class="string">'dd'</span>,</span><br><span class="line">        auto: <span class="number">1000</span></span><br><span class="line">    &#125;)</span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></p><p><strong>默认参数</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">this</span>.default = &#123;</span><br><span class="line">    type: <span class="string">'click'</span>,</span><br><span class="line">    effect: <span class="string">'default'</span>,</span><br><span class="line">    auto: <span class="literal">false</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p><strong>tab插件，包含三个参数可配置：触发方式，效果，是否自动播放</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br></pre></td><td class="code"><pre><span class="line">&lt;script src=<span class="string">"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js"</span>&gt;&lt;/script&gt;</span><br><span class="line">    &lt;script&gt;</span><br><span class="line">        $(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">            $(<span class="string">'.jq-tab'</span>).tabPlugin(&#123;</span><br><span class="line">                <span class="comment">//人工参数</span></span><br><span class="line">                type: <span class="string">'click'</span>,</span><br><span class="line">                effect: <span class="string">'dd'</span>,</span><br><span class="line">                auto: <span class="number">1000</span></span><br><span class="line">            &#125;)</span><br><span class="line">        &#125;)</span><br><span class="line">        ;(<span class="function"><span class="keyword">function</span>(<span class="params">$, window, document</span>) </span>&#123;</span><br><span class="line">            <span class="function"><span class="keyword">function</span> <span class="title">Tab</span>(<span class="params">opts</span>) </span>&#123;</span><br><span class="line">                <span class="comment">//默认参数</span></span><br><span class="line">                <span class="keyword">this</span>.default = &#123;</span><br><span class="line">                    type: <span class="string">'click'</span>,</span><br><span class="line">                    effect: <span class="string">'default'</span>,</span><br><span class="line">                    auto: <span class="literal">false</span></span><br><span class="line">                &#125;</span><br><span class="line">                <span class="comment">//合并参数</span></span><br><span class="line">                <span class="keyword">this</span>.opt = $.extend(<span class="literal">true</span>, &#123;&#125;, <span class="keyword">this</span>.default, opts);</span><br><span class="line">                </span><br><span class="line">                <span class="keyword">this</span>.lis = $(<span class="string">'.nav'</span>).find(<span class="string">'li'</span>);</span><br><span class="line">                <span class="keyword">this</span>.content = $(<span class="string">'.content'</span>).find(<span class="string">'li'</span>);</span><br><span class="line">                <span class="keyword">this</span>.num = <span class="number">0</span>;</span><br><span class="line">            &#125;</span><br><span class="line">            Tab.prototype = &#123;</span><br><span class="line">                init() &#123;</span><br><span class="line">                    <span class="keyword">this</span>.clickTab();</span><br><span class="line">                    <span class="keyword">this</span>.autoPlay();</span><br><span class="line">                &#125;,</span><br><span class="line">                clickTab() &#123;</span><br><span class="line">                    <span class="keyword">var</span> $<span class="keyword">this</span> = <span class="keyword">this</span>;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="keyword">this</span>.opt.type == <span class="string">'mouseover'</span>) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.lis.on(<span class="keyword">this</span>.opt.type, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                            $<span class="keyword">this</span>.tabType($(<span class="keyword">this</span>));</span><br><span class="line">                            $<span class="keyword">this</span>.tabEffect($(<span class="keyword">this</span>).index());</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">this</span>.lis.on(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                            $<span class="keyword">this</span>.tabType($(<span class="keyword">this</span>));</span><br><span class="line">                            $<span class="keyword">this</span>.tabEffect($(<span class="keyword">this</span>).index());</span><br><span class="line">                        &#125;)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                tabType(cur) &#123;</span><br><span class="line">                    <span class="keyword">var</span> onIndex = cur.index();</span><br><span class="line">                    cur.addClass(<span class="string">'on'</span>).siblings().removeClass(<span class="string">'on'</span>);</span><br><span class="line">                    <span class="keyword">this</span>.num = onIndex;</span><br><span class="line">                &#125;,</span><br><span class="line">                tabEffect(ind) &#123;</span><br><span class="line">                    <span class="keyword">if</span>(<span class="keyword">this</span>.opt.effect == <span class="string">'fade'</span>) &#123;</span><br><span class="line">                        <span class="keyword">this</span>.content.eq(ind).fadeIn().siblings().fadeOut();</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        <span class="keyword">this</span>.content.eq(ind).addClass(<span class="string">'active'</span>).siblings().removeClass(<span class="string">'active'</span>);</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;,</span><br><span class="line">                <span class="comment">//自动播放</span></span><br><span class="line">                autoPlay() &#123;</span><br><span class="line">                    <span class="keyword">var</span> $<span class="keyword">this</span> = <span class="keyword">this</span>;</span><br><span class="line">                    <span class="keyword">var</span> lis = <span class="keyword">this</span>.lis;</span><br><span class="line">                    <span class="comment">//防止刚开始在第一个停留2s的问题</span></span><br><span class="line">                    <span class="keyword">this</span>.num = <span class="number">1</span>;</span><br><span class="line">                    <span class="comment">//部位false的情况下</span></span><br><span class="line">                    <span class="keyword">if</span>(<span class="keyword">this</span>.opt.auto) &#123;</span><br><span class="line">                        setInterval(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">                            <span class="keyword">if</span>($<span class="keyword">this</span>.num &gt;= lis.length) &#123;</span><br><span class="line">                                $<span class="keyword">this</span>.num = <span class="number">0</span>;</span><br><span class="line">                            &#125;</span><br><span class="line">                            $<span class="keyword">this</span>.tabType(lis.eq($<span class="keyword">this</span>.num));</span><br><span class="line">                            $<span class="keyword">this</span>.tabEffect($<span class="keyword">this</span>.num);</span><br><span class="line">                            $<span class="keyword">this</span>.num++;</span><br><span class="line">                        &#125;,<span class="keyword">this</span>.opt.auto)</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            $.fn.tabPlugin = <span class="function"><span class="keyword">function</span>(<span class="params">options</span>) </span>&#123;</span><br><span class="line">                <span class="comment">//创建实例</span></span><br><span class="line">                <span class="keyword">var</span> tab = <span class="keyword">new</span> Tab(options);</span><br><span class="line">                <span class="keyword">return</span> tab.init();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;)(jQuery, <span class="built_in">window</span>, <span class="built_in">document</span>)</span><br><span class="line">    &lt;<span class="regexp">/script&gt;</span></span><br></pre></td></tr></table></figure></p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;打造自己的插件库&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="jQuery" scheme="http://yucihent.top/categories/jQuery/"/>
    
      <category term="插件开发" scheme="http://yucihent.top/categories/jQuery/%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
    
      <category term="jQuery" scheme="http://yucihent.top/tags/jQuery/"/>
    
      <category term="插件开发" scheme="http://yucihent.top/tags/%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91/"/>
    
  </entry>
  
  <entry>
    <title>phpMyAdmin中导出的sql文件导入到navicat中所需注意点</title>
    <link href="http://yucihent.top/mysql-navicat.html"/>
    <id>http://yucihent.top/mysql-navicat.html</id>
    <published>2018-04-24T23:23:43.000Z</published>
    <updated>2018-04-25T13:29:25.353Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>好吧，这是最近在做php时碰到的问题，记录一下</p></blockquote><p>这是从phpMyAdmin中导出的sql文件格式：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">NOT</span> <span class="keyword">EXISTS</span> <span class="string">`article`</span> (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`title`</span> <span class="built_in">varchar</span>(<span class="number">150</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`addtime`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=MyISAM  <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 AUTO_INCREMENT=<span class="number">96</span> ;</span><br></pre></td></tr></table></figure></p><a id="more"></a><p>这是从navicat中导出的sql文件格式：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> <span class="string">`chat`</span>;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> <span class="string">`chat`</span> (</span><br><span class="line">  <span class="string">`userid`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">unsigned</span> <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`nickname`</span> <span class="built_in">varchar</span>(<span class="number">20</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`username`</span> <span class="built_in">varchar</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`password`</span> <span class="built_in">varchar</span>(<span class="number">32</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`profile`</span> <span class="built_in">varchar</span>(<span class="number">100</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`systime`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`userid`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=MyISAM AUTO_INCREMENT=<span class="number">87</span> <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8;</span><br></pre></td></tr></table></figure></p><p>既然把sql文件导入到navicat中，就肯定是按照navicat的sql文件格式来书写：<br><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">DROP</span> <span class="keyword">TABLE</span> <span class="keyword">IF</span> <span class="keyword">EXISTS</span> article;</span><br><span class="line"><span class="keyword">CREATE</span> <span class="keyword">TABLE</span> article (</span><br><span class="line">  <span class="string">`id`</span> <span class="built_in">int</span>(<span class="number">11</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span> AUTO_INCREMENT,</span><br><span class="line">  <span class="string">`title`</span> <span class="built_in">varchar</span>(<span class="number">150</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  <span class="string">`addtime`</span> <span class="built_in">int</span>(<span class="number">10</span>) <span class="keyword">NOT</span> <span class="literal">NULL</span>,</span><br><span class="line">  PRIMARY <span class="keyword">KEY</span> (<span class="string">`id`</span>)</span><br><span class="line">) <span class="keyword">ENGINE</span>=MyISAM  <span class="keyword">DEFAULT</span> <span class="keyword">CHARSET</span>=utf8 AUTO_INCREMENT=<span class="number">96</span> ;</span><br></pre></td></tr></table></figure></p><blockquote><p><strong>注意：导入sql文件，表名是不需要带反引号的，要去掉</strong></p></blockquote>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;好吧，这是最近在做php时碰到的问题，记录一下&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;这是从phpMyAdmin中导出的sql文件格式：&lt;br&gt;&lt;figure class=&quot;highlight sql&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;CREATE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;TABLE&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;IF&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;EXISTS&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`article`&lt;/span&gt; (&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`id`&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;11&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt; AUTO_INCREMENT,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`title`&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;varchar&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;150&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;span class=&quot;string&quot;&gt;`addtime`&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;int&lt;/span&gt;(&lt;span class=&quot;number&quot;&gt;10&lt;/span&gt;) &lt;span class=&quot;keyword&quot;&gt;NOT&lt;/span&gt; &lt;span class=&quot;literal&quot;&gt;NULL&lt;/span&gt;,&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  PRIMARY &lt;span class=&quot;keyword&quot;&gt;KEY&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;`id`&lt;/span&gt;)&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;) &lt;span class=&quot;keyword&quot;&gt;ENGINE&lt;/span&gt;=MyISAM  &lt;span class=&quot;keyword&quot;&gt;DEFAULT&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;CHARSET&lt;/span&gt;=utf8 AUTO_INCREMENT=&lt;span class=&quot;number&quot;&gt;96&lt;/span&gt; ;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
      <category term="mysql" scheme="http://yucihent.top/categories/mysql/"/>
    
    
      <category term="mysql" scheme="http://yucihent.top/tags/mysql/"/>
    
  </entry>
  
  <entry>
    <title>vscode设置php.validate.executablePath</title>
    <link href="http://yucihent.top/vscode-setting.html"/>
    <id>http://yucihent.top/vscode-setting.html</id>
    <published>2018-04-24T23:23:43.000Z</published>
    <updated>2018-04-25T09:07:35.070Z</updated>
    
    <content type="html"><![CDATA[<h2 id="问题："><a href="#问题：" class="headerlink" title="问题："></a>问题：</h2><blockquote><p>做php开发时提示：无法使用PHP可执行的设置，设置php.validate。executablePath配置PHP可执行文件</p></blockquote><h2 id="解决："><a href="#解决：" class="headerlink" title="解决："></a>解决：</h2><p>一：打开vscode设置，找到php.validate.executablePath</p><p>二：找到php.exe路径，将php.validate.executablePath值设置成该路径即可</p><p><img src="https://user-images.githubusercontent.com/28501094/39234524-132c3602-48a6-11e8-89e8-3e64eee93c89.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;问题：&quot;&gt;&lt;a href=&quot;#问题：&quot; class=&quot;headerlink&quot; title=&quot;问题：&quot;&gt;&lt;/a&gt;问题：&lt;/h2&gt;&lt;blockquote&gt;
&lt;p&gt;做php开发时提示：无法使用PHP可执行的设置，设置php.validate。executablePath
      
    
    </summary>
    
      <category term="VScode" scheme="http://yucihent.top/categories/VScode/"/>
    
    
      <category term="VScode" scheme="http://yucihent.top/tags/VScode/"/>
    
  </entry>
  
  <entry>
    <title>vscode自定义代码段</title>
    <link href="http://yucihent.top/vscode-snippets.html"/>
    <id>http://yucihent.top/vscode-snippets.html</id>
    <published>2018-04-24T04:30:43.000Z</published>
    <updated>2018-08-08T13:57:54.249Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>提高开发效率，这些你必须要会</p></blockquote><blockquote><p><strong>注意：创建哪种语言的代码片段就进相应语言的代码片段区域，写js代码段就不要把代码段写在了php的代码段编写区</strong></p></blockquote><a id="more"></a><p><strong>JavaScript代码段</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">    <span class="string">"Print to vue"</span>: &#123;  </span><br><span class="line">        <span class="string">"prefix"</span>:<span class="string">"vue"</span>,  </span><br><span class="line">        <span class="string">"body"</span>: [  </span><br><span class="line">            <span class="string">"new Vue(&#123;\r\n\tel:'#app',\r\n\tdata:&#123;\r\n\t\t$2\r\n\t&#125;,\r\n&#125;)"</span>,  </span><br><span class="line">        ],  </span><br><span class="line">        <span class="string">"description"</span>:<span class="string">"script中的vue"</span>  </span><br><span class="line">    &#125;,  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>效果：</p><p><img src="https://user-images.githubusercontent.com/28501094/39166041-2c09154c-47ba-11e8-828a-9d570cee1bc5.png" alt="image"></p><p><strong>vue代码段</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;  </span><br><span class="line">    <span class="string">"Print to vue"</span>: &#123;  </span><br><span class="line">        <span class="string">"prefix"</span>: <span class="string">"vue"</span>,  </span><br><span class="line">        <span class="string">"body"</span>: [  </span><br><span class="line">            <span class="string">"&lt;template&gt;\r\n\t$1\r\n&lt;/template&gt;\r\n\r\n&lt;script&gt;\r\n\texport default &#123;\r\n\t\tdata() &#123;\r\n\t\t\treturn &#123;\r\n\t\t\t\t\r\n\t\t\t&#125;\r\n\t\t&#125;,\r\n\t&#125;\r\n&lt;/script&gt;\r\n\r\n&lt;style scoped&gt;\r\n\t$3\r\n&lt;/style&gt;"</span>  </span><br><span class="line">        ],  </span><br><span class="line">        <span class="string">"description"</span>: <span class="string">"vue文件的初始代码段"</span>  </span><br><span class="line">    &#125;,  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></p><p>效果：</p><p><img src="https://user-images.githubusercontent.com/28501094/39166076-5dac79a4-47ba-11e8-9954-f269a0e667bc.png" alt="image"></p><p><strong>还有一种更为直观的写法，更容易书写：</strong></p><p><strong>双引号需要在前面加上 \ 进行转义</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Print to js"</span>: &#123;  </span><br><span class="line">    <span class="string">"prefix"</span>: <span class="string">"js"</span>,  </span><br><span class="line">    <span class="string">"body"</span>: [  </span><br><span class="line">        <span class="string">"&lt;script src=\"https://cdn.bootcss.com/jquery/3.3.1/jquery.min.js\"&gt;&lt;/script&gt;"</span>,  </span><br><span class="line">        <span class="string">"&lt;script&gt;"</span>,  </span><br><span class="line">            <span class="string">"\t$(function() &#123;"</span>,  </span><br><span class="line">                <span class="string">"\t\t$1"</span>,  </span><br><span class="line">            <span class="string">"\t&#125;)"</span>,  </span><br><span class="line">        <span class="string">"&lt;/script&gt;"</span>  </span><br><span class="line">    ],  </span><br><span class="line">    <span class="string">"description"</span>: <span class="string">"Log output to js"</span>  </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="string">"Print to jsvue"</span>: &#123;  </span><br><span class="line">    <span class="string">"prefix"</span>: <span class="string">"jsvue"</span>,  </span><br><span class="line">    <span class="string">"body"</span>: [  </span><br><span class="line">        <span class="string">"&lt;div id=\"app\"&gt;&lt;/div&gt;"</span>,  </span><br><span class="line">        <span class="string">"&lt;script src=\"https://cdn.bootcss.com/vue/2.5.16/vue.min.js\"&gt;&lt;/script&gt;"</span>,  </span><br><span class="line">        <span class="string">"&lt;script&gt;"</span>,  </span><br><span class="line">            <span class="string">"\tnew Vue(&#123;"</span>,  </span><br><span class="line">                <span class="string">"\t\tel: 'app',"</span>,  </span><br><span class="line">                <span class="string">"\t\tdata: &#123;"</span>,  </span><br><span class="line">                    <span class="string">"\t\t\t$1"</span>,  </span><br><span class="line">                <span class="string">"\t\t&#125;"</span>,  </span><br><span class="line">            <span class="string">"\t&#125;)"</span>,  </span><br><span class="line">        <span class="string">"&lt;/script&gt;"</span>  </span><br><span class="line">    ],  </span><br><span class="line">    <span class="string">"description"</span>: <span class="string">"Log output to jsvue"</span>  </span><br><span class="line">&#125;,</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;提高开发效率，这些你必须要会&lt;/p&gt;
&lt;/blockquote&gt;
&lt;blockquote&gt;
&lt;p&gt;&lt;strong&gt;注意：创建哪种语言的代码片段就进相应语言的代码片段区域，写js代码段就不要把代码段写在了php的代码段编写区&lt;/strong&gt;&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="VScode" scheme="http://yucihent.top/categories/VScode/"/>
    
    
      <category term="VScode" scheme="http://yucihent.top/tags/VScode/"/>
    
  </entry>
  
  <entry>
    <title>判断一个变量是数组还是对象</title>
    <link href="http://yucihent.top/array-or-object.html"/>
    <id>http://yucihent.top/array-or-object.html</id>
    <published>2018-04-23T10:03:00.000Z</published>
    <updated>2018-04-23T10:09:32.748Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>Js中如何准确判断一个变量是什么，面试中这是考一个人基本功扎不扎实必定会问的一个问题</p></blockquote><h2 id="一，判断方法"><a href="#一，判断方法" class="headerlink" title="一，判断方法"></a>一，判断方法</h2><p><strong>1.typeof</strong></p><p>我们能够使用typeof判断变量的身份，判断字符串得到string，数字和NaN得到number，函数会得到function等，但是判断数组，对象和null时都会得到object，详细请看<a href="https://blog.csdn.net/yucihent/article/details/79417296" target="_blank" rel="noopener">js数据类型</a>，这就是typeof的局限性，并不能准确的判断该变量的”真实身份”。那如何判断一个变量是数组还是对象？</p><a id="more"></a><p><strong>2.instanceof</strong></p><p>使用instanceof可以用来判断一个变量是数组还是对象，原理如下：</p><p>数组也是对象的一种，使用instanceof都会返回true<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = <span class="keyword">new</span> <span class="built_in">Array</span>();</span><br></pre></td></tr></table></figure></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'aa'</span>,<span class="string">'bb'</span>,<span class="string">'cc'</span>];  </span><br><span class="line"><span class="keyword">var</span> obj = &#123;  </span><br><span class="line">     a: <span class="string">'aa'</span>,  </span><br><span class="line">     b: <span class="string">'bb'</span>,  </span><br><span class="line">     c: <span class="string">'cc'</span>  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Array</span>);      <span class="comment">//true  </span></span><br><span class="line"><span class="built_in">console</span>.log(arr <span class="keyword">instanceof</span> <span class="built_in">Object</span>);     <span class="comment">//true  </span></span><br><span class="line"><span class="built_in">console</span>.log(obj <span class="keyword">instanceof</span> <span class="built_in">Array</span>);      <span class="comment">//false  </span></span><br><span class="line"><span class="built_in">console</span>.log(obj <span class="keyword">instanceof</span> <span class="built_in">Object</span>);     <span class="comment">//true</span></span><br></pre></td></tr></table></figure><p><strong>明确说一下instanceof是如何判断的：</strong></p><p><strong>instanceof 运算符用来测试一个对象在其原型链中是否存在一个构造函数的 prototype 属性，意思就是该变量通过原型链上能否找到构造函数的prototype 属性</strong>，还不清楚原型链的请看<a href="https://github.com/hezizi/Blog/issues/1" target="_blank" rel="noopener">原型链</a></p><p>所以就能明白为什么instanceof判断一个变量可以分清楚它到底是数组还是对象：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Array</span>.prototype === arr.__proto__  </span><br><span class="line"><span class="built_in">Object</span>.prototype === arr.__proto__.__proto__</span><br></pre></td></tr></table></figure></p><blockquote><p>因为arr的原型链上存在Array.prototype和Object.prototype<br>只有Array类型的变量才会满足arr instanceof Array和arr instanceof Object都返回true，<br>也只有Object类型变量才满足obj instanceof Array返回false，obj instanceof Object返回true</p></blockquote><p><strong>3.constructor</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> arr = [<span class="string">'aa'</span>,<span class="string">'bb'</span>,<span class="string">'cc'</span>];  </span><br><span class="line"><span class="keyword">var</span> obj = &#123;  </span><br><span class="line">    <span class="string">'a'</span>: <span class="string">'aa'</span>,  </span><br><span class="line">    <span class="string">'b'</span>: <span class="string">'bb'</span>,  </span><br><span class="line">    <span class="string">'c'</span>: <span class="string">'cc'</span>  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="built_in">console</span>.log(arr.constructor === <span class="built_in">Array</span>);      <span class="comment">//true  </span></span><br><span class="line"><span class="built_in">console</span>.log(arr.constructor === <span class="built_in">Object</span>);     <span class="comment">//false  </span></span><br><span class="line"><span class="built_in">console</span>.log(obj.constructor === <span class="built_in">Object</span>);     <span class="comment">//true</span></span><br></pre></td></tr></table></figure></p><p><strong>4.Object.prototype.toString.call()</strong></p><p>Object.prototype.toString.call()方法可以精准判断变量类型，它返回[object constructorName]的字符串格式，这里的constructorName就是call参数的函数名<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="literal">NaN</span>;  </span><br><span class="line"><span class="keyword">var</span> b= <span class="string">'222'</span>;  </span><br><span class="line"><span class="keyword">var</span> c = <span class="literal">null</span>;   </span><br><span class="line"><span class="keyword">var</span> d = <span class="literal">false</span>;  </span><br><span class="line"><span class="keyword">var</span> e = <span class="literal">undefined</span>;  </span><br><span class="line"><span class="keyword">var</span> f = <span class="built_in">Symbol</span>();  </span><br><span class="line"><span class="keyword">var</span> arr = [<span class="string">'aa'</span>,<span class="string">'bb'</span>,<span class="string">'cc'</span>];  </span><br><span class="line"><span class="keyword">var</span> obj = &#123;  </span><br><span class="line">    <span class="string">'a'</span>: <span class="string">'aa'</span>,  </span><br><span class="line">    <span class="string">'b'</span>: <span class="string">'bb'</span>,  </span><br><span class="line">    <span class="string">'c'</span>: <span class="string">'cc'</span>  </span><br><span class="line">&#125;;  </span><br><span class="line"><span class="keyword">var</span> res = <span class="built_in">Object</span>.prototype.toString.call(arr);  </span><br><span class="line"><span class="built_in">console</span>.log(res);   <span class="comment">//[object Array]  </span></span><br><span class="line"><span class="keyword">var</span> res2 = <span class="built_in">Object</span>.prototype.toString.call(obj);  </span><br><span class="line"><span class="built_in">console</span>.log(res2);   <span class="comment">//[object Object]  </span></span><br><span class="line"><span class="keyword">var</span> res3 = <span class="built_in">Object</span>.prototype.toString.call(a);  </span><br><span class="line"><span class="built_in">console</span>.log(res3);   <span class="comment">//[object Number]  </span></span><br><span class="line"><span class="keyword">var</span> res4 = <span class="built_in">Object</span>.prototype.toString.call(b);  </span><br><span class="line"><span class="built_in">console</span>.log(res4);   <span class="comment">//[object String]  </span></span><br><span class="line"><span class="keyword">var</span> res4 = <span class="built_in">Object</span>.prototype.toString.call(c);  </span><br><span class="line"><span class="built_in">console</span>.log(res4);   <span class="comment">//[object Null]  </span></span><br><span class="line"><span class="keyword">var</span> res5 = <span class="built_in">Object</span>.prototype.toString.call(d);  </span><br><span class="line"><span class="built_in">console</span>.log(res5);   <span class="comment">//[object Boolean]  </span></span><br><span class="line"><span class="keyword">var</span> res6 = <span class="built_in">Object</span>.prototype.toString.call(e);  </span><br><span class="line"><span class="built_in">console</span>.log(res6);   <span class="comment">//[object Undefined]  </span></span><br><span class="line"><span class="keyword">var</span> res7 = <span class="built_in">Object</span>.prototype.toString.call(f);  </span><br><span class="line"><span class="built_in">console</span>.log(res7);   <span class="comment">//[object Symbol]</span></span><br></pre></td></tr></table></figure></p><h2 id="二，总结"><a href="#二，总结" class="headerlink" title="二，总结"></a>二，总结</h2><p>判断简单数据类型可以用typeof，判断数组，对象使用instanceof，constructor和 Object.prototype.toString.call()，最好使用Object.prototype.toString.call()，更加精准</p>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;Js中如何准确判断一个变量是什么，面试中这是考一个人基本功扎不扎实必定会问的一个问题&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一，判断方法&quot;&gt;&lt;a href=&quot;#一，判断方法&quot; class=&quot;headerlink&quot; title=&quot;一，判断方法&quot;&gt;&lt;/a&gt;一，判断方法&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1.typeof&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;我们能够使用typeof判断变量的身份，判断字符串得到string，数字和NaN得到number，函数会得到function等，但是判断数组，对象和null时都会得到object，详细请看&lt;a href=&quot;https://blog.csdn.net/yucihent/article/details/79417296&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;js数据类型&lt;/a&gt;，这就是typeof的局限性，并不能准确的判断该变量的”真实身份”。那如何判断一个变量是数组还是对象？&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yucihent.top/categories/JavaScript/"/>
    
      <category term="Array" scheme="http://yucihent.top/categories/JavaScript/Array/"/>
    
    
      <category term="JavaScript" scheme="http://yucihent.top/tags/JavaScript/"/>
    
      <category term="Array" scheme="http://yucihent.top/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>Js内置对象Array常用方法</title>
    <link href="http://yucihent.top/jsArray-ways.html"/>
    <id>http://yucihent.top/jsArray-ways.html</id>
    <published>2018-04-23T09:34:13.000Z</published>
    <updated>2018-04-23T09:41:24.875Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>你一定在面试中遇到过，别说没有</p></blockquote><h2 id="一，会改变原数组"><a href="#一，会改变原数组" class="headerlink" title="一，会改变原数组"></a>一，会改变原数组</h2><p><strong>1. 移除数组末尾最后一项.pop()，返回删除的元素</strong></p><blockquote><p>如果你在一个空数组上调用 pop()，它返回  undefined</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> word = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>];  </span><br><span class="line"><span class="keyword">let</span> newArr = word.pop();  </span><br><span class="line"><span class="built_in">console</span>.log(word);      <span class="comment">//['a', 'b', 'c']  </span></span><br><span class="line"><span class="built_in">console</span>.log(newArr);    <span class="comment">//d  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> nullArr = [];  </span><br><span class="line"><span class="built_in">console</span>.log(nullArr.pop()); <span class="comment">//undefined</span></span><br></pre></td></tr></table></figure><a id="more"></a><p><strong>2. 在数组末尾添加一个或多个元素.push()，返回修改后数组长度</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> word = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>];  </span><br><span class="line"><span class="keyword">let</span> newArr = word.push(<span class="string">'e'</span>,<span class="string">'f'</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(word);      <span class="comment">//['a', 'b', 'c', 'd', 'e', 'f']  </span></span><br><span class="line"><span class="built_in">console</span>.log(newArr);    <span class="comment">//6</span></span><br></pre></td></tr></table></figure></p><p><strong>3. 移除数组第一项.shift()，返回移除的元素</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> word = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>];  </span><br><span class="line"><span class="keyword">let</span> newArr = word.shift();  </span><br><span class="line"><span class="built_in">console</span>.log(word);      <span class="comment">//['b', 'c', 'd']  </span></span><br><span class="line"><span class="built_in">console</span>.log(newArr);    <span class="comment">//a</span></span><br></pre></td></tr></table></figure></p><p><strong>4. 在数组头部添加一个或多个元素.unshift()，返回修改后数组长度</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> word = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>];  </span><br><span class="line"><span class="keyword">let</span> newArr = word.unshift(<span class="string">'11'</span>,<span class="string">'22'</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(word);      <span class="comment">//['11', '22', 'a', 'b', 'c', 'd']  </span></span><br><span class="line"><span class="built_in">console</span>.log(newArr);    <span class="comment">//6</span></span><br></pre></td></tr></table></figure></p><p><strong>5. 对数组元素排序.sort()，返回排序后的数组</strong></p><blockquote><p>默认排序顺序是根据字符串Unicode码点</p></blockquote><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> fruit = [<span class="string">'cherries'</span>, <span class="string">'apples'</span>, <span class="string">'bananas'</span>];  </span><br><span class="line"><span class="built_in">console</span>.log(fruit.sort());       <span class="comment">// ['apples', 'bananas', 'cherries']  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> scores = [<span class="number">1</span>, <span class="number">10</span>, <span class="number">21</span>, <span class="number">2</span>];   </span><br><span class="line"><span class="built_in">console</span>.log(scores.sort());  </span><br><span class="line"><span class="comment">// [1, 10, 2, 21]  </span></span><br><span class="line"><span class="comment">// 注意10在2之前,  </span></span><br><span class="line"><span class="comment">// 因为在 Unicode 指针顺序中"10"在"2"之前  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">let</span> things = [<span class="string">'word'</span>, <span class="string">'Word'</span>, <span class="string">'1 Word'</span>, <span class="string">'2 Words'</span>];  </span><br><span class="line"><span class="built_in">console</span>.log(things.sort());   </span><br><span class="line"><span class="comment">// ['1 Word', '2 Words', 'Word', 'word']  </span></span><br><span class="line"><span class="comment">// 在Unicode中, 数字在大写字母之前,  </span></span><br><span class="line"><span class="comment">// 大写字母在小写字母之前.  </span></span><br><span class="line">  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">compare</span>(<span class="params">a, b</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(a &lt; b) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">-1</span>;  </span><br><span class="line">    &#125;<span class="keyword">else</span> <span class="keyword">if</span>(a &gt; b) &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">1</span>;  </span><br><span class="line">    &#125;<span class="keyword">else</span> &#123;  </span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">let</span> num = [<span class="number">1</span>, <span class="number">10</span>, <span class="number">21</span>, <span class="number">2</span>];  </span><br><span class="line"><span class="built_in">console</span>.log(num.sort(compare)); <span class="comment">//[1, 2, 10, 21]</span></span><br></pre></td></tr></table></figure><p><strong>6. 颠倒数组元素.reverse()，返回颠倒后的数组</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> word = [<span class="string">"a"</span>, <span class="string">"b"</span>, <span class="string">"c"</span>, <span class="string">"d"</span>];  </span><br><span class="line"><span class="keyword">let</span> newArr = word.reverse();  </span><br><span class="line"><span class="built_in">console</span>.log(word);      <span class="comment">//["d", "c", "b", "a"]  </span></span><br><span class="line"><span class="built_in">console</span>.log(newArr);    <span class="comment">//["d", "c", "b", "a"]</span></span><br></pre></td></tr></table></figure></p><p><strong>7. 删除或插入元素.splice()，返回数组删除的项，没有删除的项，返回空数组</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> word = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>];  </span><br><span class="line"><span class="comment">//删除,前闭后开  </span></span><br><span class="line"><span class="keyword">var</span> newArr = word.splice(<span class="number">0</span>,<span class="number">2</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(word);      <span class="comment">//["c", "d"]  </span></span><br><span class="line"><span class="built_in">console</span>.log(newArr);    <span class="comment">//["a", "b"]  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//插入,当前数组索引1处插入hello  </span></span><br><span class="line"><span class="keyword">var</span> newArr = word.splice(<span class="number">1</span>,<span class="number">0</span>,<span class="string">'hello'</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(word);      <span class="comment">//["c", "hello", "d"]  </span></span><br><span class="line"><span class="built_in">console</span>.log(newArr);    <span class="comment">//[]  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//替换  </span></span><br><span class="line"><span class="keyword">var</span> newArr = word.splice(<span class="number">1</span>,<span class="number">1</span>,<span class="string">'world'</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(word);      <span class="comment">//["c", "world", "d"]  </span></span><br><span class="line"><span class="built_in">console</span>.log(newArr);    <span class="comment">//["hello"]</span></span><br></pre></td></tr></table></figure></p><h2 id="二，不会改变原数组"><a href="#二，不会改变原数组" class="headerlink" title="二，不会改变原数组"></a>二，不会改变原数组</h2><p><strong>1. 合并两个或多个数组.concat()，返回新数组</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> word = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>];  </span><br><span class="line"><span class="keyword">let</span> word2 = [<span class="string">'hello'</span>,<span class="string">'world'</span>];  </span><br><span class="line"><span class="keyword">let</span> newArr = word.concat(word2);  </span><br><span class="line"><span class="built_in">console</span>.log(word);      <span class="comment">//["a", "b", "c", "d"]  </span></span><br><span class="line"><span class="built_in">console</span>.log(newArr);    <span class="comment">//["a", "b", "c", "d", "hello", "world"]</span></span><br></pre></td></tr></table></figure></p><p><strong>2. 将数组所有元素连接成一个字符串.join()，返回连接后的字符串</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> word = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>];  </span><br><span class="line"><span class="keyword">let</span> newArr = word.join(<span class="string">'---'</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(word);      <span class="comment">//["a", "b", "c", "d"]  </span></span><br><span class="line"><span class="built_in">console</span>.log(newArr);    <span class="comment">//a---b---c---d</span></span><br></pre></td></tr></table></figure></p><p><strong>3. 截取数组元素到新数组中.slice()，返回新数组</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> word = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>];  </span><br><span class="line"><span class="comment">//原数组索引为1开始截取后面所有元素  </span></span><br><span class="line"><span class="keyword">let</span> newArr = word.slice(<span class="number">1</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(word);      <span class="comment">//["a", "b", "c", "d"]  </span></span><br><span class="line"><span class="built_in">console</span>.log(newArr);    <span class="comment">//["b", "c", "d"]  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//截取原数组索引为1到3之间的元素，前闭后开  </span></span><br><span class="line"><span class="keyword">let</span> newArr2 = word.slice(<span class="number">1</span>,<span class="number">3</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(word);      <span class="comment">//["a", "b", "c", "d"]  </span></span><br><span class="line"><span class="built_in">console</span>.log(newArr2);    <span class="comment">//["b", "c"]  </span></span><br><span class="line">  </span><br><span class="line"><span class="comment">//截取原数组倒数第三个元素与倒数第一个元素之间的元素，前闭后开  </span></span><br><span class="line"><span class="keyword">let</span> newArr3 = word.slice(<span class="number">-3</span>,<span class="number">-1</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(word);      <span class="comment">//["a", "b", "c", "d"]  </span></span><br><span class="line"><span class="built_in">console</span>.log(newArr3);    <span class="comment">//[["b", "c"]</span></span><br></pre></td></tr></table></figure></p><p><strong>4. 获取查询元素第一次出现的索引.indexOf()，找不到查询元素，则返回-1</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> word = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>];  </span><br><span class="line"><span class="keyword">let</span> index = word.indexOf(<span class="string">'b'</span>);      <span class="comment">//1,第一次出现b的索引值  </span></span><br><span class="line"><span class="keyword">let</span> index2 = word.indexOf(<span class="string">'hello'</span>); <span class="comment">//-1  </span></span><br><span class="line"><span class="built_in">console</span>.log(index);  </span><br><span class="line"><span class="built_in">console</span>.log(index2);</span><br></pre></td></tr></table></figure></p><p><strong>5. 获取查询元素最后一次出现的索引.lastIndexOf()，找不到查询元素，则返回-1</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> word = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>];  </span><br><span class="line"><span class="keyword">let</span> index = word.lastIndexOf(<span class="string">'b'</span>);      <span class="comment">//2,最后一个b的索引值为2  </span></span><br><span class="line"><span class="keyword">let</span> index2 = word.lastIndexOf(<span class="string">'hello'</span>); <span class="comment">//-1  </span></span><br><span class="line"><span class="built_in">console</span>.log(index);  </span><br><span class="line"><span class="built_in">console</span>.log(index2);</span><br></pre></td></tr></table></figure></p><p><strong>6. toString()返回有数组每个元素的字符串形式拼接而成的以逗号分隔的字符串</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> word = [<span class="string">'a'</span>, <span class="string">'b'</span>, <span class="string">'b'</span>, <span class="string">'c'</span>, <span class="string">'d'</span>];  </span><br><span class="line"><span class="keyword">let</span> str = word.toString();      <span class="comment">//a,b,b,c,d  </span></span><br><span class="line"><span class="built_in">console</span>.log(str);</span><br></pre></td></tr></table></figure></p><p><strong>7. toLocaleString()返回一个字符串表示数组中的元素</strong></p><blockquote><p>更多了解查看<a href="https://developer.mozilla.org/zh-CN/docs/Web/JavaScript/Reference/Global_Objects/Array/toLocaleString" target="_blank" rel="noopener">MDN</a></p></blockquote><h2 id="三，迭代方法"><a href="#三，迭代方法" class="headerlink" title="三，迭代方法"></a>三，迭代方法</h2><blockquote><p>每个方法接受含有三个参数的函数，三个参数为：数组中的项，元素索引，数组本身</p></blockquote><ul><li>every()，数组所有元素都满足要求则返回true，否则返回false</li><li>some()，只要有满足要求的就返回true</li><li>filter()，返回过滤后的结果数组</li><li>map()，返回在函数中处理过的数组</li><li>forEach()，遍历整个数组<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> number = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];  </span><br><span class="line"><span class="keyword">var</span> res = number.every(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> (item &gt; <span class="number">2</span>);  </span><br><span class="line">&#125;)  </span><br><span class="line"><span class="built_in">console</span>.log(res);   <span class="comment">//false  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> res = number.some(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> (item &gt; <span class="number">2</span>);  </span><br><span class="line">&#125;)  </span><br><span class="line"><span class="built_in">console</span>.log(res);   <span class="comment">//true  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> res = number.filter(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> (item &gt; <span class="number">2</span>);  </span><br><span class="line">&#125;)  </span><br><span class="line"><span class="built_in">console</span>.log(res);   <span class="comment">//[3, 4, 5, 6, 7, 8]  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> res = number.map(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> (item * <span class="number">2</span>);  </span><br><span class="line">&#125;)  </span><br><span class="line"><span class="built_in">console</span>.log(res);   <span class="comment">//[2, 4, 6, 8, 10, 12, 14, 16]  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> res = number.forEach(<span class="function"><span class="keyword">function</span>(<span class="params">item, index, array</span>) </span>&#123;  </span><br><span class="line">    <span class="comment">//执行某些操作  </span></span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure></li></ul><h2 id="四，归并方法"><a href="#四，归并方法" class="headerlink" title="四，归并方法"></a>四，归并方法</h2><p>迭代数组所有项，构建最终返回值，每个方法接受两个参数：调用的函数和作为归并基础的初始值。函数接受4个参数：前一个值，当前值，项索引，数组本身。<strong>函数返回的值都会作为第一个参数自动传给下一项，第一次迭代从数组第二项开始，当前值为数组第二项</strong>。</p><ul><li>reduce()，从数组第一项开始遍历到最后</li><li>reduceRight()，从数组最后一项开始遍历到第一项<figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"> <span class="comment">/* </span></span><br><span class="line"><span class="comment">    开始执行回调函数cur为2，prev为1， </span></span><br><span class="line"><span class="comment">    第二次执行回调函数，在之前的基础上加1 </span></span><br><span class="line"><span class="comment">    函数返回的值都会作为一个参数传给下一项， </span></span><br><span class="line"><span class="comment">    最后执行函数时就是28+8 </span></span><br><span class="line"><span class="comment">*/</span>  </span><br><span class="line"><span class="keyword">var</span> number = [<span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span>,<span class="number">7</span>,<span class="number">8</span>];  </span><br><span class="line"><span class="keyword">var</span> res = number.reduce(<span class="function"><span class="keyword">function</span>(<span class="params">prev, cur, index, array</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> prev + cur;  </span><br><span class="line">&#125;)  </span><br><span class="line"><span class="built_in">console</span>.log(res);   <span class="comment">//1+2+3+4+5+6+7+8=36  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> res = number.reduceRight(<span class="function"><span class="keyword">function</span>(<span class="params">prev, cur, index, array</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> prev + cur;  </span><br><span class="line">&#125;)  </span><br><span class="line"><span class="built_in">console</span>.log(res);   <span class="comment">//8+7+6+5+4+3+2+1=36</span></span><br></pre></td></tr></table></figure></li></ul>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;你一定在面试中遇到过，别说没有&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;一，会改变原数组&quot;&gt;&lt;a href=&quot;#一，会改变原数组&quot; class=&quot;headerlink&quot; title=&quot;一，会改变原数组&quot;&gt;&lt;/a&gt;一，会改变原数组&lt;/h2&gt;&lt;p&gt;&lt;strong&gt;1. 移除数组末尾最后一项.pop()，返回删除的元素&lt;/strong&gt;&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;如果你在一个空数组上调用 pop()，它返回  undefined&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;1&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;2&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;3&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;4&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;5&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;6&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;7&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; word = [&lt;span class=&quot;string&quot;&gt;&#39;a&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;b&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;c&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;d&#39;&lt;/span&gt;];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; newArr = word.pop();  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(word);      &lt;span class=&quot;comment&quot;&gt;//[&#39;a&#39;, &#39;b&#39;, &#39;c&#39;]  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(newArr);    &lt;span class=&quot;comment&quot;&gt;//d  &lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; nullArr = [];  &lt;/span&gt;&lt;br&gt;&lt;span class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(nullArr.pop()); &lt;span class=&quot;comment&quot;&gt;//undefined&lt;/span&gt;&lt;/span&gt;&lt;br&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yucihent.top/categories/JavaScript/"/>
    
      <category term="Array" scheme="http://yucihent.top/categories/JavaScript/Array/"/>
    
    
      <category term="JavaScript" scheme="http://yucihent.top/tags/JavaScript/"/>
    
      <category term="Array" scheme="http://yucihent.top/tags/Array/"/>
    
  </entry>
  
  <entry>
    <title>经验总结之JavaScript篇(一)</title>
    <link href="http://yucihent.top/javascript-report-1.html"/>
    <id>http://yucihent.top/javascript-report-1.html</id>
    <published>2018-04-22T03:39:07.000Z</published>
    <updated>2018-04-22T04:29:08.551Z</updated>
    
    <content type="html"><![CDATA[<blockquote><p>此文主旨是记录面试中遇到的面试题，包括js中常见，易错，重要知识点</p></blockquote><a id="more"></a> <h2 id="window-onload和-document-ready-的区别"><a href="#window-onload和-document-ready-的区别" class="headerlink" title="window.onload和$(document).ready()的区别"></a>window.onload和$(document).ready()的区别</h2><pre><code>window.onload是在页面中包含图片在内的所有元素全部加载完成再执行；$(document).ready()是DOM树加载完成之后执行，不包含图片，其他媒体文件；因此$(document).ready()快于window.onload执行；</code></pre><h2 id="数组去重"><a href="#数组去重" class="headerlink" title="数组去重"></a>数组去重</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> arr = [<span class="string">'a'</span>,<span class="string">'bb'</span>,<span class="string">'22'</span>,<span class="string">'a'</span>,<span class="string">'yuci'</span>,<span class="string">'haha'</span>,<span class="string">'22'</span>];</span><br></pre></td></tr></table></figure><p>1.es6数据结构Set</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> unique = <span class="keyword">new</span> <span class="built_in">Set</span>(arr);  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Array</span>.from(unique));</span><br></pre></td></tr></table></figure><p>2.使用push()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arr2 = [];  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; arr.length; i++) &#123;  </span><br><span class="line">    <span class="keyword">if</span>(arr2.indexOf(arr[i]) == <span class="number">-1</span>) &#123; <span class="comment">//不包含某个值则返回-1  </span></span><br><span class="line">        arr2.push(arr[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="built_in">console</span>.log(arr2);</span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//如果当前数组的第i项在当前数组中第一次出现的位置不是i，那么表示第i项是重复的，忽略掉。否则存入结果数组  </span></span><br><span class="line"><span class="keyword">let</span> arr3 = [arr[<span class="number">0</span>]];  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">1</span>; i &lt; arr.length; i++) &#123;  </span><br><span class="line">    <span class="keyword">if</span>(arr.indexOf(arr[i]) == i) &#123;  </span><br><span class="line">        arr3.push(arr[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="built_in">console</span>.log(arr3);</span><br></pre></td></tr></table></figure><p>3.排序去除相邻重复元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> arrSort = arr.sort();  </span><br><span class="line"><span class="keyword">let</span> arr4 = [];  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i&lt; arrSort.length; i++) &#123;  </span><br><span class="line">    <span class="keyword">if</span>(arrSort[i] != arrSort[i+<span class="number">1</span>]) &#123;  </span><br><span class="line">        arr4.push(arrSort[i]);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="built_in">console</span>.log(arr4);</span><br></pre></td></tr></table></figure><p>4.使用splice()</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">let</span> len = arr.length;  </span><br><span class="line"><span class="keyword">for</span>(<span class="keyword">let</span> i = <span class="number">0</span>; i &lt; len; i++) &#123;  </span><br><span class="line">    <span class="keyword">for</span>(<span class="keyword">let</span> j = i + <span class="number">1</span>; j &lt; len; j++) &#123;  </span><br><span class="line">        <span class="keyword">if</span>(arr[i] === arr[j]) &#123;  </span><br><span class="line">            arr.splice(i,<span class="number">1</span>);  </span><br><span class="line">            len--;  </span><br><span class="line">            j--;  </span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="built_in">console</span>.log(arr);</span><br></pre></td></tr></table></figure><h2 id="事件委托"><a href="#事件委托" class="headerlink" title="事件委托"></a>事件委托</h2><p>得益于事件冒泡，当多个元素有相同的事件，将事件绑定在父元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> oUl = <span class="built_in">document</span>.getElementById(<span class="string">'oul'</span>);  </span><br><span class="line">oUl.addEventListener(<span class="string">'click'</span>, <span class="function"><span class="keyword">function</span>(<span class="params">e</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> e = e||<span class="built_in">window</span>.event;  </span><br><span class="line">    <span class="keyword">var</span> tar = e.target;  </span><br><span class="line">    <span class="keyword">if</span>(tar.nodeName === <span class="string">'LI'</span>) &#123;  </span><br><span class="line">        alert(tar.innerHTML);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;)</span><br></pre></td></tr></table></figure><p><strong>更详细请看：<a href="http://www.codeceo.com/javascript-event-commission.html" target="_blank" rel="noopener">事件委托</a></strong></p><h2 id="判断变量类型"><a href="#判断变量类型" class="headerlink" title="判断变量类型"></a>判断变量类型</h2><ul><li>typeof()用于判断简单数据；</li><li>判断一个变量是对象还是数组使用instanceof，constructor或`Object.prototype.toString.call()；</li></ul><p>更详细请看：<a href="https://blog.csdn.net/yucihent/article/details/79652913" target="_blank" rel="noopener">判断数据类型</a></p><h2 id="同步和异步（简要阐述）"><a href="#同步和异步（简要阐述）" class="headerlink" title="同步和异步（简要阐述）"></a>同步和异步（简要阐述）</h2><ul><li>同步：由于js单线程，同步任务都在主线程上排队执行，前面任务没执行完成，后面的任务会一直等待；</li><li>异步：不进入主线程，进入任务队列，等待主线程任务执行完成，开始执行。最基础的异步操作setTimeout和setInterval，等待主线程任务执行完，在开始执行里面的函数；</li></ul><p><strong>更详细请看：<a href="http://www.ruanyifeng.com/blog/2014/10/event-loop.html" target="_blank" rel="noopener">js运行机制</a></strong></p><h2 id="返回false的几种情况"><a href="#返回false的几种情况" class="headerlink" title="返回false的几种情况"></a>返回false的几种情况</h2><p>false，null，0，””，undefined，NaN</p><h2 id="js类型值的区别"><a href="#js类型值的区别" class="headerlink" title="js类型值的区别"></a>js类型值的区别</h2><pre><code>存储地：简单数据类型：存储在栈中；引用数据类型：存储在堆中，在栈中存储了指针，指向存储在堆中的地址，解释器会先检索在栈中的地址，从堆中获得实体；大小：简单数据类型：大小固定，占用空间小，频繁使用，所以存储在栈中；引用数据类型：大小不固定，占用空间大；</code></pre><h2 id="闭包"><a href="#闭包" class="headerlink" title="闭包"></a>闭包</h2><pre><code>何为闭包：有权访问另一个作用域中变量的函数闭包特性：可实现函数外访问函数内变量，外层变量可以不被垃圾回收机制回收为什么？怎么解决？</code></pre><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;  </span><br><span class="line">    setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">        <span class="built_in">console</span>.log(i);    </span><br><span class="line">    &#125;, <span class="number">1000</span>);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>输出结果都为10，因为for()循环过程中每次传值，匿名函数并没有执行，相当于执行10次function(){console.log(i);}，循环结束i变为10，所以输出全部为10；</p><p>使用闭包，自执行匿名函数包裹:</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; <span class="number">10</span>; i++) &#123;  </span><br><span class="line">    (<span class="function"><span class="keyword">function</span>(<span class="params">j</span>) </span>&#123;  </span><br><span class="line">        setTimeout(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">            <span class="built_in">console</span>.log(j);    </span><br><span class="line">        &#125;, <span class="number">1000</span>);  </span><br><span class="line">    &#125;)(i);  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>外部匿名函数立即执行，把 i 作为参数，赋值给 j ，因为是立即执行，所以每次循环输出不同值。</p><p>引用外层变量不被回收，会相比其他函数占用更高内存，使用不当容易造成内存泄漏。</p><h2 id="this的指向"><a href="#this的指向" class="headerlink" title="this的指向"></a>this的指向</h2><ul><li>全局范围：指向window（严格模式下不存在全局变量，指向undefined）;</li><li>普通函数调用：指向window;</li><li>对象方法调用：指向最后调用它的对象；</li><li>构造函数调用：指向new出来的对象；</li><li>显示设置this：call，apply方法显示将this指向第一个参数指明的对象</li></ul><h2 id="new具体做了些什么"><a href="#new具体做了些什么" class="headerlink" title="new具体做了些什么"></a>new具体做了些什么</h2><ul><li>创建一个新对象foo；</li><li>并将它的<code>__proto__</code>指向其构造函数的prototype，<code>foo.__proto__ = Foo.prototype</code>;</li><li>动态将this指向新对象，Foo.apply(foo，arguments);</li><li>执行函数体中的代码；</li><li>放回新对象foo;</li></ul><h2 id="原型和原型链"><a href="#原型和原型链" class="headerlink" title="原型和原型链"></a>原型和原型链</h2><p>创建一个函数就会为其创建一个prototype属性，指向这个函数的原型对象，原型对象会自动获得constructor属性，指向prototype属性所在函数。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.a = <span class="string">"a"</span>;    </span><br><span class="line"><span class="built_in">Object</span>.prototype.b = <span class="string">"b"</span>;    </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;    </span><br><span class="line"><span class="built_in">console</span>.log(Person);    <span class="comment">//function Person()    </span></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person();    </span><br><span class="line"><span class="built_in">console</span>.log(p);         <span class="comment">//Person &#123;&#125; 对象    </span></span><br><span class="line"><span class="built_in">console</span>.log(p.a);       <span class="comment">//undefined    </span></span><br><span class="line"><span class="built_in">console</span>.log(p.b);       <span class="comment">//b</span></span><br></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">p.__proto__ === Person.prototype；Person.prototype.constructor === Person</span><br></pre></td></tr></table></figure><p> 当调用某种方法或查找某种属性时，首先会在自身调用和查找，如果自身并没有该属性或方法，则会去它的<code>__proto__</code>属性中调用查找，也就是它构造函数的prototype中调用查找，如果构造函数中也没有该属性方法，则会去构造函数的隐式原型中查找，一直到null，就这样形成原型链。</p><p><strong>更多有关原型请看：<a href="https://github.com/hezizi/Blog/issues/1" target="_blank" rel="noopener">原型和原型链</a></strong></p><h2 id="继承方式"><a href="#继承方式" class="headerlink" title="继承方式"></a>继承方式</h2><p><strong>原型链继承：</strong></p><p>Child()的原型作为Parent()的实例来继承Parent()的方法属性</p><p>因为所有实例都继承原型方法属性，其中一个实例对原型属性值更改后，所有实例调用该属性的值全部更改</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Parent</span>(<span class="params"></span>) </span>&#123;&#125;  </span><br><span class="line">Parent.prototype.parentSay = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">'i am parent'</span>;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Child</span>(<span class="params"></span>) </span>&#123;&#125;  </span><br><span class="line">Child.prototype.childSay = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">return</span> <span class="string">'i am child'</span>;  </span><br><span class="line">&#125;  </span><br><span class="line">Child.prototype = <span class="keyword">new</span> Parent();  </span><br><span class="line"><span class="keyword">var</span> par = <span class="keyword">new</span> Parent();  </span><br><span class="line"><span class="keyword">var</span> kid = <span class="keyword">new</span> Child();  </span><br><span class="line">  </span><br><span class="line"><span class="built_in">console</span>.log(kid.parentSay());           <span class="comment">//i am parent</span></span><br></pre></td></tr></table></figure><p><strong>构造函数继承：</strong></p><p>在子类的构造函数内部通过call或apply来调用父类构造函数</p><p>无法实现函数的复用</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">this</span>.name = [<span class="string">'zhangsan'</span>,<span class="string">'lisi'</span>,<span class="string">'wangwu'</span>];  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    People.call(<span class="keyword">this</span>);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="keyword">var</span> per1 = <span class="keyword">new</span> Person();  </span><br><span class="line">per1.name.push(<span class="string">'zhanliu'</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(per1.name);     <span class="comment">//["zhangsan", "lisi", "wangwu", "zhanliu"]  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> per2 = <span class="keyword">new</span> Person();  </span><br><span class="line"><span class="built_in">console</span>.log(per2.name);     <span class="comment">//["zhangsan", "lisi", "wangwu"]</span></span><br></pre></td></tr></table></figure><p><strong>组合继承：</strong></p><p>将原型链继承和构造函数继承结合，最常用的继承模式</p><p>原型链继承共享的属性和方法，构造函数继承实例属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">People</span>(<span class="params">num</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">this</span>.num = num;  </span><br><span class="line">    <span class="keyword">this</span>.name = [<span class="string">'zhangsan'</span>,<span class="string">'lisi'</span>,<span class="string">'wangwu'</span>];  </span><br><span class="line">&#125;  </span><br><span class="line">People.prototype.numCount = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.num);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params">num</span>) </span>&#123;  </span><br><span class="line">    People.call(<span class="keyword">this</span>, num);  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//继承方式  </span></span><br><span class="line">Person.prototype = <span class="keyword">new</span> People();  </span><br><span class="line">Person.prototype.constructor = Person;  </span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> per1 = <span class="keyword">new</span> Person(<span class="number">10</span>);  </span><br><span class="line">per1.name.push(<span class="string">'zhaoliu'</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(per1.name);     <span class="comment">//["zhangsan", "lisi", "wangwu", "zhanliu"]  </span></span><br><span class="line">per1.numCount();            <span class="comment">//10  </span></span><br><span class="line">  </span><br><span class="line"><span class="keyword">var</span> per2 = <span class="keyword">new</span> Person(<span class="number">20</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(per2.name);     <span class="comment">//["zhangsan", "lisi", "wangwu"]  </span></span><br><span class="line">per2.numCount();            <span class="comment">//20</span></span><br></pre></td></tr></table></figure><p><strong>更多继承方式请看：<a href="https://developer.mozilla.org/zh-CN/docs/Learn/JavaScript/Objects/Inheritance" target="_blank" rel="noopener">继承方式</a></strong></p><h2 id="数组常用方法"><a href="#数组常用方法" class="headerlink" title="数组常用方法"></a>数组常用方法</h2><p><strong>改变原数组：</strong></p><ul><li>尾部删除pop()</li><li>尾部添加push()</li><li>头部删除shift()</li><li>头部添加unshift()</li><li>排序sort()</li><li>颠倒数组元素reverse()</li><li>删除或插入元素splice();</li></ul><p><strong>不会改变元素组：</strong></p><ul><li>合并数组concat()</li><li>拼接数组元素join()</li><li>截取元素slice()</li><li>indexOf()</li><li>lastIndexOf()</li><li>toString()</li></ul><p><strong>更详细数组方法总结请看：<a href="https://blog.csdn.net/yucihent/article/details/79685148" target="_blank" rel="noopener">Array数组方法总结</a></strong></p><h2 id="数据存储"><a href="#数据存储" class="headerlink" title="数据存储"></a>数据存储</h2><pre><code>Cookie：用于客户端与服务端通信，也具有本地存储的功能localStorage，sessionStorage：专门用于存储区别：大小：Cookie容量为4K，因为用于客户端与服务端通信，所有http都携带，如果太大会降低效率； localStorage，sessionStorage大小为5M。失效时间：Cookie会在浏览器关闭时删除，除非主动设置删除时间；localStorage一直都在直到用户主动删除或清除浏览器缓存；sessionStorage在浏览器关闭时删除。</code></pre>]]></content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;此文主旨是记录面试中遇到的面试题，包括js中常见，易错，重要知识点&lt;/p&gt;
&lt;/blockquote&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yucihent.top/categories/JavaScript/"/>
    
      <category term="经验总结" scheme="http://yucihent.top/categories/JavaScript/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    
    
      <category term="JavaScript" scheme="http://yucihent.top/tags/JavaScript/"/>
    
      <category term="经验总结" scheme="http://yucihent.top/tags/%E7%BB%8F%E9%AA%8C%E6%80%BB%E7%BB%93/"/>
    
  </entry>
  
  <entry>
    <title>深入javascript之执行上下文</title>
    <link href="http://yucihent.top/javascript-context.html"/>
    <id>http://yucihent.top/javascript-context.html</id>
    <published>2018-04-21T12:45:27.000Z</published>
    <updated>2018-05-02T13:09:46.539Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一，相关概念"><a href="#一，相关概念" class="headerlink" title="一，相关概念"></a>一，相关概念</h2><ul><li>EC : 执行上下文</li><li>ECS : 执行环境栈</li><li>VO ： 变量对象</li><li>AO ： 活动对象</li><li>scope chain ：作用域链</li></ul><a id="more"></a><h2 id="二，执行上下文"><a href="#二，执行上下文" class="headerlink" title="二，执行上下文"></a>二，执行上下文</h2><p> javascript运行的代码环境有三种：</p><ul><li>全局代码：代码默认运行的环境，最先会进入到全局环境中</li><li>函数代码：在函数的局部环境中运行的代码</li><li>Eval代码：在Eval()函数中运行的代码</li></ul><p>全局上下文是最外围的一个执行环境，web浏览器中被认为是window对象。在初始化代码时会先进入全局上下文中，每当一个函数被调用时就会为该函数创建一个执行上下文，每个函数都有自己的执行上下文。来看一段代码：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> f1Context = <span class="string">'f1 context'</span>;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">var</span> f2Context = <span class="string">'f2 context'</span>;  </span><br><span class="line">        <span class="function"><span class="keyword">function</span> <span class="title">f3</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">            <span class="keyword">var</span> f3Context = <span class="string">'f3 context'</span>;  </span><br><span class="line">            <span class="built_in">console</span>.log(f3Context);  </span><br><span class="line">        &#125;  </span><br><span class="line">        f3();  </span><br><span class="line">        <span class="built_in">console</span>.log(f2Context);  </span><br><span class="line">    &#125;  </span><br><span class="line">    f2();  </span><br><span class="line">    <span class="built_in">console</span>.log(f1Context);  </span><br><span class="line">&#125;  </span><br><span class="line">f1();</span><br></pre></td></tr></table></figure><p>这段代码有4个执行上下文：全局上下文和f1()，f2()，f3()属于自己的执行上下文。</p><p><strong>全局上下文拥有f1()，f1()的上下文中有变量f1Context和f2()，f2()的上下文有变量f2Context和f3()，f3()上下文有变量f3Context</strong>。</p><p>在这我们了解下执行环境栈ECS，一段代码所有的执行上下文都会被推入栈中等待被执行，因为js是单线程，任务都为同步任务的情况下某一时间只能执行一个任务，<strong>执行一段代码首先会进入全局上下文中，并将其压入ECS中，执行f1()会为其创建执行上下文压入栈顶，f1()中有f2()，再为f2()创建f2()的执行上下文，依次，最终全局上下文被压入到栈底，f3()的执行上下文在栈顶，函数执行完后，ECS就会弹出其上下文，f3()上下文弹出后，f2()上下文来到栈顶，开始执行f2()，依次，最后ECS中只剩下全局上下文，它等到应用程序退出，例如浏览器关闭时销毁</strong>。</p><p>总结：（执行上下文就用EC替代）</p><pre><code>1. 全局上下文压入栈顶2. 执行某一函数就为其创建一个EC，并压入栈顶3. 栈顶的函数执行完之后它的EC就会从ECS中弹出，并且变量对象(VO)随之销毁4. 所有函数执行完之后ECS中只剩下全局上下文，在应用关闭时销毁</code></pre><p><img src="https://user-gold-cdn.xitu.io/2018/4/3/1628989f46f94209?w=780&amp;h=520&amp;f=png&amp;s=17411" alt=""></p><p>大家再看一道道题：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">i</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(i  == <span class="number">3</span>) &#123;  </span><br><span class="line">        <span class="keyword">return</span>;  </span><br><span class="line">    &#125;  </span><br><span class="line">    foo(i+<span class="number">1</span>);  </span><br><span class="line">    <span class="built_in">console</span>.log(i);  </span><br><span class="line">&#125;  </span><br><span class="line">foo(<span class="number">0</span>);</span><br></pre></td></tr></table></figure></p><p>大家明白执行上下文的进栈出栈就应该知道结果为什么是2，1，0</p><p> <strong>ECS栈顶为foo(3)的的上下文，直接return弹出后，栈顶变成foo(2)的上下文，执行foo(2)，输出2并弹出，执行foo(1)，输出1并弹出，执行foo(0)，输出0并弹出，关闭浏览器后全局EC弹出，所以结果为2，1，0</strong></p><p> 刚才提到VO，我们来了解什么是VO</p><h2 id="三，VO-AO"><a href="#三，VO-AO" class="headerlink" title="三，VO/AO"></a>三，VO/AO</h2><h4 id="VO-变量对象"><a href="#VO-变量对象" class="headerlink" title="VO(变量对象)"></a>VO(变量对象)</h4><blockquote><p>创建执行上下文时与之关联的会有一个变量对象，该上下文中的所有变量和函数全都保存在这个对象中。</p></blockquote><h4 id="AO-活动对象"><a href="#AO-活动对象" class="headerlink" title="AO(活动对象)"></a>AO(活动对象)</h4><blockquote><p>进入到一个执行上下文时，此执行上下文中的变量和函数都可以被访问到，可以理解为被激活</p></blockquote><p>谈到了上下文的创建和执行，我们来看看EC建立的过程：</p><pre><code>建立阶段：(函数被调用，但是还未执行函数中的代码)    1. 创建变量，参数，函数，arguments对象    2. 建立作用域链    3. 确定this的值执行阶段：变量赋值，函数引用，执行代码</code></pre><p>执行上下文为一个对象，包含VO，作用域链和this</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">executionContextObj = &#123;    </span><br><span class="line">    variableObject: &#123; <span class="comment">/* 函数中的arguments对象, 参数, 内部的变量以及函数声明 */</span> &#125;,    </span><br><span class="line">    scopeChain: &#123; <span class="comment">/* variableObject 以及所有父执行上下文中的variableObject */</span> &#125;,    </span><br><span class="line">    <span class="keyword">this</span>: &#123;&#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>具体过程：</p><pre><code>1. 找到当前上下文调用函数的代码2. 执行代码之前，先创建执行上下文3. 创建阶段：    3-1. 创建变量对象(VO)：          1. 创建arguments对象，检查当前上下文的参数，建立该对象下的属性和属性值        2. 扫描上下文的函数申明：            1. 每扫描到一个函数什么就会在VO里面用函数名创建一个属性，为一个指针，指向该函数在内存中的地址            2. 如果函数名在VO中已经存在，对应的属性值会被新的引用覆盖        3. 扫描上下文的变量申明：            1. 每扫描到一个变量就会用变量名作为属性名，其值初始化为undefined            2. 如果该变量名在VO中已经存在，则直接跳过继续扫描    3-2. 初始化作用域链    3-3. 确定上下文中this的指向4. 代码执行阶段    4-1. 执行函数体中的代码，给VO中的变量赋值</code></pre><p>看代码理解：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params">i</span>) </span>&#123;    </span><br><span class="line">    <span class="keyword">var</span> a = <span class="string">'hello'</span>;    </span><br><span class="line">    <span class="keyword">var</span> b = <span class="function"><span class="keyword">function</span> <span class="title">privateB</span>(<span class="params"></span>) </span>&#123;&#125;;    </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>) </span>&#123;&#125;    </span><br><span class="line">&#125;    </span><br><span class="line">foo(<span class="number">22</span>);</span><br></pre></td></tr></table></figure><p>调用foo(22)时创建上下文包括VO，作用域链，this值</p><p>以函数名作为属性值，指向该函数在内存中的地址；变量名作为属性名，其初始化值为undefined</p><p><strong>注意：函数申明先于变量申明</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fooExecutionContext = &#123;    </span><br><span class="line">    variableObject: &#123;    </span><br><span class="line">        <span class="built_in">arguments</span>: &#123;    </span><br><span class="line">            <span class="number">0</span>: <span class="number">22</span>,    </span><br><span class="line">            length: <span class="number">1</span>    </span><br><span class="line">        &#125;,    </span><br><span class="line">        i: <span class="number">22</span>,    </span><br><span class="line">        c: pointer to <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>),    </span></span><br><span class="line"><span class="function">        <span class="title">a</span>: <span class="title">undefined</span>,    </span></span><br><span class="line"><span class="function">        <span class="title">b</span>: <span class="title">undefined</span>    </span></span><br><span class="line"><span class="function">    &#125;,    </span></span><br><span class="line"><span class="function">    <span class="title">scopeChain</span>: </span>&#123; ... &#125;,    </span><br><span class="line">    <span class="keyword">this</span>: &#123; ... &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>创建阶段结束后就会进入代码执行阶段，给VO中的变量赋值</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">fooExecutionContext = &#123;    </span><br><span class="line">    variableObject: &#123;    </span><br><span class="line">        <span class="built_in">arguments</span>: &#123;    </span><br><span class="line">            <span class="number">0</span>: <span class="number">22</span>,    </span><br><span class="line">            length: <span class="number">1</span>    </span><br><span class="line">        &#125;,    </span><br><span class="line">        i: <span class="number">22</span>,    </span><br><span class="line">        c: pointer to <span class="function"><span class="keyword">function</span> <span class="title">c</span>(<span class="params"></span>),    </span></span><br><span class="line"><span class="function">        <span class="title">a</span>: '<span class="title">hello</span>',    </span></span><br><span class="line"><span class="function">        <span class="title">b</span>: <span class="title">pointer</span> <span class="title">to</span> <span class="title">function</span> <span class="title">privateB</span>(<span class="params"></span>)    </span></span><br><span class="line"><span class="function">    &#125;,    </span></span><br><span class="line"><span class="function">    <span class="title">scopeChain</span>: </span>&#123; ... &#125;,    </span><br><span class="line">    <span class="keyword">this</span>: &#123; ... &#125;    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="四，变量提升"><a href="#四，变量提升" class="headerlink" title="四，变量提升"></a>四，变量提升</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">foo</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(f1);    <span class="comment">//f1() &#123;&#125;  </span></span><br><span class="line">    <span class="built_in">console</span>.log(f2);    <span class="comment">//undefined  </span></span><br><span class="line">    <span class="keyword">var</span> f1 = <span class="string">'hosting'</span>;  </span><br><span class="line">    <span class="keyword">var</span> f2 = <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123;&#125;  </span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>) </span>&#123;&#125;  </span><br><span class="line">&#125;  </span><br><span class="line">foo();</span><br></pre></td></tr></table></figure><p><strong>调用foo()时会创建VO，初始VO中变量值等有一系列的过程，所有变量初始化值为undefined，所以console.log(f2)的值为undefined。并且函数申明先于变量申明，所以console.log(f1)的值为f1()函数而不为hosting</strong></p><h2 id="五，总结"><a href="#五，总结" class="headerlink" title="五，总结"></a>五，总结</h2><ul><li>调用函数时会为其创建执行上下文，并压入执行环境栈的栈顶，执行完毕弹出，执行上下文被销毁，随之VO也被销毁</li><li>EC创建阶段分创建阶段和代码执行阶段</li><li>创建阶段初始变量值为undefined，执行阶段才为变量赋值</li><li>函数申明先于变量申明</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一，相关概念&quot;&gt;&lt;a href=&quot;#一，相关概念&quot; class=&quot;headerlink&quot; title=&quot;一，相关概念&quot;&gt;&lt;/a&gt;一，相关概念&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;EC : 执行上下文&lt;/li&gt;
&lt;li&gt;ECS : 执行环境栈&lt;/li&gt;
&lt;li&gt;VO ： 变量对象&lt;/li&gt;
&lt;li&gt;AO ： 活动对象&lt;/li&gt;
&lt;li&gt;scope chain ：作用域链&lt;/li&gt;
&lt;/ul&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yucihent.top/categories/JavaScript/"/>
    
      <category term="深入Js系列" scheme="http://yucihent.top/categories/JavaScript/%E6%B7%B1%E5%85%A5Js%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="JavaScript" scheme="http://yucihent.top/tags/JavaScript/"/>
    
      <category term="深入Js系列" scheme="http://yucihent.top/tags/%E6%B7%B1%E5%85%A5Js%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>深入javascript之作用域</title>
    <link href="http://yucihent.top/javascript-scope.html"/>
    <id>http://yucihent.top/javascript-scope.html</id>
    <published>2018-04-19T23:35:36.000Z</published>
    <updated>2018-04-22T03:42:09.550Z</updated>
    
    <content type="html"><![CDATA[<h2 id="一，作用域"><a href="#一，作用域" class="headerlink" title="一，作用域"></a>一，作用域</h2><p>包括静态作用域和动态作用域，静态作用域也叫词法作用域，JavaScript采用的是静态作用域。</p><p>JavaScript中作用域是指可访问变量，对象，函数的集合，也就是调用它们能生效的代码区块。在JavaScript中没有块级作用域，只有全局作用域和函数作用域，可以模仿块级作用域，下面会讲到。</p><a id="more"></a><h3 id="全局，函数作用域"><a href="#全局，函数作用域" class="headerlink" title="全局，函数作用域"></a>全局，函数作用域</h3><p>看个简单的例子<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> a = <span class="number">10</span>  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">f1</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">var</span> b = c = <span class="number">20</span>;  </span><br><span class="line">    <span class="built_in">console</span>.log(a);     <span class="comment">//10  </span></span><br><span class="line">    <span class="built_in">console</span>.log(c);     <span class="comment">//20  </span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">f2</span>(<span class="params"></span>) </span>&#123;  </span><br><span class="line">       <span class="built_in">console</span>.log(b); <span class="comment">//20  </span></span><br><span class="line">    &#125;f2();  </span><br><span class="line">&#125;  </span><br><span class="line">f1();  </span><br><span class="line"><span class="built_in">console</span>.log(a);     <span class="comment">//10  </span></span><br><span class="line"><span class="built_in">console</span>.log(c);     <span class="comment">//20  </span></span><br><span class="line"><span class="built_in">console</span>.log(b);     <span class="comment">//error</span></span><br></pre></td></tr></table></figure></p><p>var b = c = 20  是指 var b = c; c = 20<br>在f1函数中c没使用var声明为全局变量，b为局部变量，绑定在f1函数下，外部访问不到。</p><h3 id="模仿块级作用域"><a href="#模仿块级作用域" class="headerlink" title="模仿块级作用域"></a>模仿块级作用域</h3><p>没有块级作用域，但是有if()，for()等块语句，<strong>在块语句内部定义的变量会保留在它们已经存在的作用域内</strong>，举个栗子：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="literal">true</span>) &#123;  </span><br><span class="line">    <span class="keyword">var</span> word = <span class="string">'hello'</span>;  </span><br><span class="line">    <span class="built_in">console</span>.log(word);  <span class="comment">//hello  </span></span><br><span class="line">&#125;  </span><br><span class="line"><span class="built_in">console</span>.log(word);      <span class="comment">//hello</span></span><br></pre></td></tr></table></figure></p><p>f()语句存在全局作用域下，所以内部定义的变量存在于全局作用域中，无论在哪都可以访问。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num</span>) </span>&#123;  </span><br><span class="line">    <span class="keyword">if</span>(num &gt; <span class="number">10</span>) &#123;  </span><br><span class="line">        <span class="keyword">var</span> num = <span class="number">10</span>;  </span><br><span class="line">        <span class="built_in">console</span>.log(num);   <span class="comment">//10  </span></span><br><span class="line">    &#125;  </span><br><span class="line">    <span class="built_in">console</span>.log(num);       <span class="comment">//10  </span></span><br><span class="line">&#125;  </span><br><span class="line">add(<span class="number">11</span>);  </span><br><span class="line"><span class="built_in">console</span>.log(num);   <span class="comment">//Uncaught ReferenceError: num is not defined</span></span><br></pre></td></tr></table></figure><p>此时if()在add函数中，内部定义的变量存在于add函数的作用域中，只有在函数和块语句中才可以访问到，外部无法访问。</p><p> <strong>使用自执行的匿名函数包裹块语句构建块作用域，也叫私有作用域</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num</span>) </span>&#123;  </span><br><span class="line">     <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;  </span><br><span class="line">        <span class="built_in">console</span>.log(i);     <span class="comment">//0,1,2,3,4,5,6,7,8,9  </span></span><br><span class="line">     &#125;  </span><br><span class="line">     <span class="built_in">console</span>.log(i);        <span class="comment">//10  </span></span><br><span class="line">   &#125;  </span><br><span class="line"> add(<span class="number">10</span>);</span><br></pre></td></tr></table></figure></p><p>将代码改为：<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">num</span>) </span>&#123;  </span><br><span class="line">    (<span class="function"><span class="keyword">function</span> (<span class="params"></span>) </span>&#123;  </span><br><span class="line">        <span class="keyword">for</span>(<span class="keyword">var</span> i = <span class="number">0</span>; i &lt; num; i++) &#123;  </span><br><span class="line">           <span class="built_in">console</span>.log(i);  <span class="comment">//0,1,2,3,4,5,6,7,8,9  </span></span><br><span class="line">        &#125;  </span><br><span class="line">    &#125;)()  </span><br><span class="line">   <span class="built_in">console</span>.log(i);      <span class="comment">//Uncaught ReferenceError: i is not defined  </span></span><br><span class="line">&#125;  </span><br><span class="line">add(<span class="number">10</span>);</span><br></pre></td></tr></table></figure></p><p>此时变量i只能在for()循环中访问到，在add函数和外部都无法访问，并且在匿名函数中定义的任何变量都会在执行结束时被销毁，所以变量i只能在for()循环中使用。</p><p>在ES6中新增了块级作用域，let const声明的变量在块语句中声明时，外部无法访问。</p><p>对作用域有明确的理解对于后面学习执行上下文会有很大帮助。</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;一，作用域&quot;&gt;&lt;a href=&quot;#一，作用域&quot; class=&quot;headerlink&quot; title=&quot;一，作用域&quot;&gt;&lt;/a&gt;一，作用域&lt;/h2&gt;&lt;p&gt;包括静态作用域和动态作用域，静态作用域也叫词法作用域，JavaScript采用的是静态作用域。&lt;/p&gt;
&lt;p&gt;JavaScript中作用域是指可访问变量，对象，函数的集合，也就是调用它们能生效的代码区块。在JavaScript中没有块级作用域，只有全局作用域和函数作用域，可以模仿块级作用域，下面会讲到。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yucihent.top/categories/JavaScript/"/>
    
      <category term="深入Js系列" scheme="http://yucihent.top/categories/JavaScript/%E6%B7%B1%E5%85%A5Js%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="JavaScript" scheme="http://yucihent.top/tags/JavaScript/"/>
    
      <category term="深入Js系列" scheme="http://yucihent.top/tags/%E6%B7%B1%E5%85%A5Js%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
  <entry>
    <title>深入javascript之原型和原型链</title>
    <link href="http://yucihent.top/javascript-prototype.html"/>
    <id>http://yucihent.top/javascript-prototype.html</id>
    <published>2018-04-19T13:22:27.000Z</published>
    <updated>2018-04-22T03:42:01.214Z</updated>
    
    <content type="html"><![CDATA[<p><img src="https://user-images.githubusercontent.com/28501094/38719872-a6076836-3f26-11e8-907e-f040e8760c9b.png" alt="image"></p><p>原型和原型链是js中的难点也是重点，明白了原型和原型链会让我们在后面不管是学习还是工作都会更加高效，并且原型和原型链会是面试中必不可少的话题。看完此篇文章一定会让你对原型，原型链有深刻全面的了解。</p><a id="more"></a><h2 id="一，函数对象"><a href="#一，函数对象" class="headerlink" title="一，函数对象"></a>一，函数对象</h2><ul><li>所有引用类型（函数，数组，对象）都拥有<code>__proto__</code>属性（隐式原型）</li><li>所有函数拥有<code>prototype</code>属性（显式原型）（仅限函数）</li><li>原型对象：拥有<code>prototype</code>属性的对象，在定义函数时就被创建</li></ul><h2 id="二，构造函数"><a href="#二，构造函数" class="headerlink" title="二，构造函数"></a>二，构造函数</h2><p>看段代码<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//创建构造函数  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Word</span>(<span class="params">words</span>)</span>&#123;  </span><br><span class="line">    <span class="keyword">this</span>.words = words;  </span><br><span class="line">&#125;  </span><br><span class="line">Word.prototype = &#123;  </span><br><span class="line">    alert()&#123;  </span><br><span class="line">        alert(<span class="keyword">this</span>.words);  </span><br><span class="line">    &#125;  </span><br><span class="line">&#125;  </span><br><span class="line"><span class="comment">//创建实例  </span></span><br><span class="line"><span class="keyword">var</span> w = <span class="keyword">new</span> Word(<span class="string">"hello world"</span>);  </span><br><span class="line">w.print = <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;  </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>.words);  </span><br><span class="line">    <span class="built_in">console</span>.log(<span class="keyword">this</span>);  <span class="comment">//Person对象  </span></span><br><span class="line">&#125;  </span><br><span class="line">w.print();  <span class="comment">//hello world  </span></span><br><span class="line">w.alert();  <span class="comment">//hello world</span></span><br></pre></td></tr></table></figure></p><p>print()方法是w实例本身具有的方法，所以w.print()打印hello world；alert()不属于w实例的方法，属于构造函数的方法，w.alert()也会打印hello world，因为实例继承构造函数的方法。</p><p><strong>实例w的隐式原型指向它构造函数的显式原型</strong></p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">w.__proto__ === Word.prototype</span><br></pre></td></tr></table></figure><p><strong>当调用某种方法或查找某种属性时，首先会在自身调用和查找，如果自身并没有该属性或方法，则会去它的<code>__proto__</code>属性中调用查找，也就是它构造函数的<code>prototype</code>中调用查找</strong>。所以很好理解实例继承构造函数的方法和属性：</p><p>w本身没有alert()方法，所以会去Word()的显式原型中调用alert()，即实例继承构造函数的方法。</p><h2 id="三，原型和原型链"><a href="#三，原型和原型链" class="headerlink" title="三，原型和原型链"></a>三，原型和原型链</h2><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">Function</span>.prototype.a = <span class="string">"a"</span>;  </span><br><span class="line"><span class="built_in">Object</span>.prototype.b = <span class="string">"b"</span>;  </span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Person</span>(<span class="params"></span>)</span>&#123;&#125;  </span><br><span class="line"><span class="built_in">console</span>.log(Person);    <span class="comment">//function Person()  </span></span><br><span class="line"><span class="keyword">let</span> p = <span class="keyword">new</span> Person();  </span><br><span class="line"><span class="built_in">console</span>.log(p);         <span class="comment">//Person &#123;&#125; 对象  </span></span><br><span class="line"><span class="built_in">console</span>.log(p.a);       <span class="comment">//undefined  </span></span><br><span class="line"><span class="built_in">console</span>.log(p.b);       <span class="comment">//b</span></span><br></pre></td></tr></table></figure><p>想一想p.a打印结果为undefined，p.b结果为b</p><p>p是Person()的实例，是一个Person对象，它拥有一个属性值<code>__proto__</code>，并且<code>__proto__</code>是一个对象，包含两个属性值<code>constructor</code>和<code>__proto__</code>。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(p.__proto__.constructor);   <span class="comment">//function Person()&#123;&#125;  </span></span><br><span class="line"><span class="built_in">console</span>.log(p.__proto__.__proto__);     <span class="comment">//对象&#123;&#125;，拥有很多属性值</span></span><br></pre></td></tr></table></figure><p>我们会发现<code>p.__proto__.constructor</code>返回的结果为构造函数本身，<code>p.__proto__.__proto__</code>有很多参数。</p><p><img src="https://user-images.githubusercontent.com/28501094/38719701-d997be4a-3f25-11e8-8674-00875350e6b4.png" alt="image"></p><p><strong>我们调用constructor属性，<code>p.__proto__.__proto__.constructor</code>得到拥有多个参数的Object()函数，<code>Person.prototype</code>的隐式原型的<code>constructor</code>指向Object()，即<code>Person.prototype.__proto__.constructor == Object()</code></strong>。</p><p><strong>从<code>p.__proto__.constructor</code>返回的结果为构造函数本身得到<code>Person.prototype.constructor == Person()</code>所以<code>p.__proto__.__proto__== Object.prototype</code></strong> 。</p><p> 所以p.b打印结果为b，p没有b属性，会一直通过<code>__proto__</code>向上查找，最后当查找到<code>Object.prototype</code>时找到，最后打印出b，向上查找过程中，得到的是<code>Object.prototype</code>，而不是<code>Function.prototype</code>，找不到a属性，所以结果为undefined，这就是原型链，通过<code>__proto__</code>向上进行查找，最终到null结束。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">console</span>.log(p.__proto__.__proto__.__proto__);   <span class="comment">//null  </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Object</span>.prototype.__proto__);        <span class="comment">//null</span></span><br></pre></td></tr></table></figure><p>大家理解刚才的过程，相信下面这些应该也都明白</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//Function  </span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">Function</span>(<span class="params"></span>)</span>&#123;&#125;  </span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>);  <span class="comment">//Function()  </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.prototype.constructor);    <span class="comment">//Function()  </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.prototype.__proto__);      <span class="comment">//Object.prototype  </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.prototype.__proto__.__proto__);    <span class="comment">//NULL  </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.prototype.__proto__.constructor);  <span class="comment">//Object()  </span></span><br><span class="line"><span class="built_in">console</span>.log(<span class="built_in">Function</span>.prototype.__proto__ === <span class="built_in">Object</span>.prototype); <span class="comment">//true</span></span><br></pre></td></tr></table></figure><h2 id="四，总结"><a href="#四，总结" class="headerlink" title="四，总结"></a>四，总结</h2><pre><code>1. 查找属性，如果本身没有，则会去__proto__中查找，也就是构造函数的显式原型中查找，如果构造函数中也没有该属性，因为构造函数也是对象，也有__proto__，那么会去它的显式原型中查找，一直到null，如果没有则返回undefined。2. p.__proto__.constructor  == function Person(){}3. p.___proto__.__proto__== Object.prototype4. p.___proto__.__proto__.__proto__== Object.prototype.__proto__ == null          5. 通过__proto__形成原型链而非protrotype</code></pre><p>最后附上一张图，大家阅读完之后，看图应该可以很容易理解</p><p><img src="https://user-images.githubusercontent.com/28501094/38719872-a6076836-3f26-11e8-907e-f040e8760c9b.png" alt="image"></p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;https://user-images.githubusercontent.com/28501094/38719872-a6076836-3f26-11e8-907e-f040e8760c9b.png&quot; alt=&quot;image&quot;&gt;&lt;/p&gt;
&lt;p&gt;原型和原型链是js中的难点也是重点，明白了原型和原型链会让我们在后面不管是学习还是工作都会更加高效，并且原型和原型链会是面试中必不可少的话题。看完此篇文章一定会让你对原型，原型链有深刻全面的了解。&lt;/p&gt;
    
    </summary>
    
      <category term="JavaScript" scheme="http://yucihent.top/categories/JavaScript/"/>
    
      <category term="深入Js系列" scheme="http://yucihent.top/categories/JavaScript/%E6%B7%B1%E5%85%A5Js%E7%B3%BB%E5%88%97/"/>
    
    
      <category term="JavaScript" scheme="http://yucihent.top/tags/JavaScript/"/>
    
      <category term="深入Js系列" scheme="http://yucihent.top/tags/%E6%B7%B1%E5%85%A5Js%E7%B3%BB%E5%88%97/"/>
    
  </entry>
  
</feed>
